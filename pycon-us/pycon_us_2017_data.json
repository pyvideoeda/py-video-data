[
    {
        "index": 1,
        "title": "Final remarks and conference close  - Pycon 2017",
        "url": "https://www.youtube.com/watch?v=AjFfsOA7AQI",
        "video_id": "AjFfsOA7AQI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170522",
        "duration": 592,
        "view_count": 5694,
        "like_count": 26,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "Final remarks and conference close  - Pycon 2017",
        "thumbnail": "https://i.ytimg.com/vi/AjFfsOA7AQI/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=AjFfsOA7AQI",
        "original_url": "https://www.youtube.com/watch?v=AjFfsOA7AQI"
    },
    {
        "index": 2,
        "title": "Kelsey Hightower - Keynote - Pycon 2017",
        "url": "https://www.youtube.com/watch?v=u_iAXzy3xBA",
        "video_id": "u_iAXzy3xBA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170522",
        "duration": 2003,
        "view_count": 31409,
        "like_count": 629,
        "comment_count": 24,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Kelsey Hightower\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/u_iAXzy3xBA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=u_iAXzy3xBA",
        "original_url": "https://www.youtube.com/watch?v=u_iAXzy3xBA"
    },
    {
        "index": 3,
        "title": "Gothic Colors Using Python to understand color in nineteenth century literature   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=3dDtACSYVx0",
        "video_id": "3dDtACSYVx0",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1953,
        "view_count": 4819,
        "like_count": 73,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Eleanor Stribling, Caroline Winter\n\nDo you love literature and programming? Have you ever been curious about what the heck “Digital Humanities” are? Join us for a quick survey of what’s going on in this growing field and learn about a specific project, “Gothic Colors” where we set out to enumerate and analyze color references and mood in 19th century Gothic novels, using Python and a couple of popular libraries.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/3dDtACSYVx0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=3dDtACSYVx0",
        "original_url": "https://www.youtube.com/watch?v=3dDtACSYVx0"
    },
    {
        "index": 4,
        "title": "Benny Bauer   Python in The Serverless Era   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=G17E4Muylis",
        "video_id": "G17E4Muylis",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1847,
        "view_count": 8673,
        "like_count": 99,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Benny Bauer\n\nServerless is the latest phase in the evolution of cloud development. Its building blocks are functions, a bunch of stateless “nano-services”, that can scale automatically and charged only when used. It enables teams to focus more on development while having fully managed servers. In this talk I'll cover the Serverless Architectures practices, use cases, tooling and the role python plays in it. \n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/G17E4Muylis/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=G17E4Muylis",
        "original_url": "https://www.youtube.com/watch?v=G17E4Muylis"
    },
    {
        "index": 5,
        "title": "Mary Nagle   Piecing it Together A beginner's guide to application configuration   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=OaT0EN-02iY",
        "video_id": "OaT0EN-02iY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1803,
        "view_count": 9122,
        "like_count": 127,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Mary Nagle\n\nAssembling all the necessary setup for an application you’re building can often be more frustrating than writing the app itself. Learning to do this well is difficult, especially for those who are new to Python and might not know where to begin or what questions to ask. While there is no “right way” to set up a development environment or application, understanding the components involved and how they interact can empower you to customize your setup to best suit your needs. This talk will dive into what happens when setting up a database, the purpose and configuration of an isolated environment, how Python packages are installed, and finally, how each of these components interact with each other and the application itself; in particular, how an application's structure facilitates said interactions.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/OaT0EN-02iY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=OaT0EN-02iY",
        "original_url": "https://www.youtube.com/watch?v=OaT0EN-02iY"
    },
    {
        "index": 6,
        "title": "Tim Head   Look mum no hands! From blinking LEDs to a bike speedometer with MicroPython   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=D-5V7s0GflU",
        "video_id": "D-5V7s0GflU",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1858,
        "view_count": 4339,
        "like_count": 45,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Tim Head\n\nIn this talk I will show you how to use a micro-controller to build a wifi enabled speedometer for your bike, using MicroPython. And some hardware. And a bike (maybe). I will introduce you to the world of MicroPython: a python distribution that runs on micro-controllers. Micro-controllers are small computers that are all around us: in cars, TVs, and your internet connected fridge. We will start with making LEDs blink, then serve webpages, build an interrupt handler and finally put it all together to make a wifi enabled speedometer for a bike.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/D-5V7s0GflU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=D-5V7s0GflU",
        "original_url": "https://www.youtube.com/watch?v=D-5V7s0GflU"
    },
    {
        "index": 7,
        "title": "Sam Agnew   Hacking Classic Nintendo Games with Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=v75rNdPukuI",
        "video_id": "v75rNdPukuI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1712,
        "view_count": 12229,
        "like_count": 288,
        "comment_count": 9,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Sam Agnew\n\nDo you feel like using your superpowers as a developer to bring the games of your childhood into the future with the power of the Internet? In this live coded journey, we'll build an SMS powered \"\"Game Genie\"\" allowing the audience to send text messages to manipulate the Nintendo games being played in real time. This will involve working with Flask, the Twilio API, the FCEUX NES emulator and how to bridge them with quick Lua scripts.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/v75rNdPukuI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=v75rNdPukuI",
        "original_url": "https://www.youtube.com/watch?v=v75rNdPukuI"
    },
    {
        "index": 8,
        "title": "Eric Evenchick   Hacking Cars with Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=3bZNhMcv4Y8",
        "video_id": "3bZNhMcv4Y8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1788,
        "view_count": 15751,
        "like_count": 232,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Eric Evenchick\n\nModern cars are networks of computers, and a high end vehicle could have nearly 100 different computers inside. These devices control everything from the engine to the airbags. By understanding how these systems work, we can interface with vehicles to read data, perform diagnostics, and even modify operation.\n\nIn this talk, we'll discuss pyvit, the Python Vehicle Interface Toolkit. This library, combined with some open source hardware, allows developers to talk to automotive controllers from Python. \n\nWe will begin with an introduction to automotive networks, to provide a basis for understanding the tools. Next, we will look at the tools and show the basics of using them. Finally, we'll discuss real world applications of these tools, and how they're being used in the automotive world today.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/3bZNhMcv4Y8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=3bZNhMcv4Y8",
        "original_url": "https://www.youtube.com/watch?v=3bZNhMcv4Y8"
    },
    {
        "index": 9,
        "title": "Christopher Fonnesbeck   Probabilistic Programming with PyMC3   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=5TyvJ6jXHYE",
        "video_id": "5TyvJ6jXHYE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1863,
        "view_count": 13001,
        "like_count": 207,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Christopher Fonnesbeck\n\nBayesian statistics offers robust and flexible methods for data analysis that, because they are based on probability models, have the added benefit of being readily interpretable by non-statisticians. Until recently, however, the implementation of Bayesian models has been prohibitively complex for use by most analysts. But, the advent of probabilistic programming has served to abstract the complexity of Bayesian statistics, making such methods more broadly available. PyMC3 is a open-source Python module for probabilistic programming that implements several modern, computationally-intensive statistical algorithms for fitting Bayesian models, including Hamiltonian Monte Carlo (HMC) and variational inference. PyMC3’s intuitive syntax is helpful for new users, and the reliance on Theano for much of the computational work has allowed developers to keep the code base simple, making it easy to extend the software to meet analytic needs. PyMC3 itself extends Python's powerful \"\"scientific stack\"\" of development tools, which provide fast and efficient data structures, parallel processing, and interfaces for describing statistical models.  \n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/5TyvJ6jXHYE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=5TyvJ6jXHYE",
        "original_url": "https://www.youtube.com/watch?v=5TyvJ6jXHYE"
    },
    {
        "index": 10,
        "title": "Christine Waigl   The Next Step Finding Model Parameters With Random Walks    PyCon 2017",
        "url": "https://www.youtube.com/watch?v=sHS2-av7AgQ",
        "video_id": "sHS2-av7AgQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1379,
        "view_count": 2211,
        "like_count": 23,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Christine Waigl\n\nThe statistician John Tukey -- who designed the box plot and coined the term \"\"bit\"\" -- wrote:  \"\"An approximate answer to the right problem is worth a good deal more than an exact answer to an approximate problem\"\". Python has become one of the major languages for statistical data analysis, not least because of the expressiveness of the language itself and the availability of tools like Jupyter Notebooks, which enable iterative reasoning about a problem and its solutions. \n\nThis talks takes one step beyond an introduction to statistics with Python and aims to familiarize the audience with two concepts: a class of problems (so-called inverse problems), and a powerful statistical tool (the random walk, or more formally Markov-Chain Monte Carlo (MCMC) sampling with the Metropolis algorithm). \n\nIn inverse problems, model parameters are estimated from observational data. Both model and data are expected to be affected by error. The objective is not only to find parameters that best describe the observations, but also to figure out how good, or how possibly bad, a solution might be. Inverse problems are extremely common in many fields and crop up each time we attempt to reconstruct a reality from sensor, radar, scattering or imaging data. \n\nThe Metropololis-Hastings algorithm offers a solution via random sampling of a Bayesian posterior distribution. Even though listed as one of the 20th century's top 10 algorithms by the journal _Computing in Science & Engineering_, the Metropolis algorithm is easy to understand and implement, and a fun and instructive way to explore even complicated multi-variate probability distributions. \n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/sHS2-av7AgQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=sHS2-av7AgQ",
        "original_url": "https://www.youtube.com/watch?v=sHS2-av7AgQ"
    },
    {
        "index": 11,
        "title": "Eric J  Ma   Bayesian Statistical Analysis with Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=p1IB4zWq9C8",
        "video_id": "p1IB4zWq9C8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1841,
        "view_count": 20347,
        "like_count": 385,
        "comment_count": 14,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Eric J. Ma\n\nYou've got some data, and now you want to analyze it with Python. You're on your way to greatness! Now the problem comes: do I do the t-test? Chi-squared test? How do I decide? In this talk, inspired by many Pythonista Bayesians (@jakevdp, @allendowney, @twiecki, @fonnesbeck) before, I will show you how you can take common statistical decision problems, formulate them as a Bayesian analysis problem, and use PyMC3 as your workhorse tool for gaining insights. This talk will be math-light and code-heavy, and if you download the slides, you'll have a simple template for more complex Bayesian analysis down the road!\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/p1IB4zWq9C8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=p1IB4zWq9C8",
        "original_url": "https://www.youtube.com/watch?v=p1IB4zWq9C8"
    },
    {
        "index": 12,
        "title": "Miguel Grinberg   Asynchronous Python for the Complete Beginner   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=iG6fr81xHKA",
        "video_id": "iG6fr81xHKA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1858,
        "view_count": 124759,
        "like_count": 2702,
        "comment_count": 69,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Miguel Grinberg\n\nWith the introduction of the asyncio package in Python 3.4, you can hear lots of people talking about asynchronous programming, most in a favorable way, some not so much. In this talk, I will tell you what this async fever is about and what can it do for you that regular Python can't, not only with asyncio, but also with other frameworks that existed long before it.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/iG6fr81xHKA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=iG6fr81xHKA",
        "original_url": "https://www.youtube.com/watch?v=iG6fr81xHKA"
    },
    {
        "index": 13,
        "title": "Barry Warsaw   aiosmtpd   A better asyncio based SMTP server   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=1Uyo2c2GYKQ",
        "video_id": "1Uyo2c2GYKQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1865,
        "view_count": 3475,
        "like_count": 36,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Barry Warsaw\n\nsmtpd.py has been in the standard library for many years.  It's been a common tool for deploying SMTP and LMTP servers that handle email-based communication in Python, providing both basic protocol implementations and a fundamental module for higher level tools, such as lazr.smtptest for testing email clients.  Based on asyncore and asynchat, smtpd.py is showing its age, and its API is unwieldy.\n\nFortunately, there's a new alternative available.  aiosmtpd is a modern reinvention based on asyncio, with all the improvements that come along with such a new implementation.  It provides servers for both the SMTP and LMTP protocols, as well as a higher level \"\"controller\"\" API for testing SMTP and LMTP clients.  It exposes a much better API for customization, allowing the user to associate a simple \"\"handler\"\" to process incoming messages without having to worry about the details of the protocols, and it provides some useful hooks for subclassing.\n\nThis talk will describe the purpose and history of smtpd.py and aiosmtpd, show how users can extend the servers and implement specialized handlers, and show how applications can use the testing API for ensuring that their email sending applications do the right things.  Examples will be taken from GNU Mailman 3, which uses aiosmtpd extensively.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/1Uyo2c2GYKQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=1Uyo2c2GYKQ",
        "original_url": "https://www.youtube.com/watch?v=1Uyo2c2GYKQ"
    },
    {
        "index": 14,
        "title": "Yury Selivanov   asyncawait and asyncio in Python 3 6 and beyond   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=2ZFFv-wZ8_g",
        "video_id": "2ZFFv-wZ8_g",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1570,
        "view_count": 19812,
        "like_count": 298,
        "comment_count": 12,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Yury Selivanov\n\nThe talk overviews async/await, asynchronous generators and comprehensions in Python 3.6 and the asyncio module. We'll discuss when and how asyncio should be used in a modern applications and services, what is uvloop, and what asyncio frameworks and libraries one should use. I'll share our ideas about where asyncio is headed and what to expect in Python 3.7.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/2ZFFv-wZ8_g/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=2ZFFv-wZ8_g",
        "original_url": "https://www.youtube.com/watch?v=2ZFFv-wZ8_g"
    },
    {
        "index": 15,
        "title": "Dave Forgac   Share Your Code! Python Packaging Without Complication   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=qOH-h-EKKac",
        "video_id": "qOH-h-EKKac",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1762,
        "view_count": 14740,
        "like_count": 236,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Dave Forgac\n\nIf you want people to use your code you should package it! You may have heard that packaging is hard but the Python packaging ecosystem has evolved a lot over the years. Taking your beautiful code and sharing it with the world is complex but it doesn't have to be complicated. In this talk you will learn how to take advantage of modern tooling and practices so you can get boring stuff out of the way, publish quickly and frequently, and focus on your code.\n\nThis talk will cover:\n\n- A (brief) history of Python packaging\n- Python Packaging User Guide recommendations\n- Distribution formats\n- Anatomy of a package\n- Automating package creation\n- Adding:\n  - Testing\n  - CI\n  - Documentation\n- Testing package installation\n- Releasing to PyPI\n\nThis talk is for you if you're new to Python packaging and would like to learn how to share you code or if you've worked with Python for a while and just aren't up-to-date with the latest packaging practices. \n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/qOH-h-EKKac/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=qOH-h-EKKac",
        "original_url": "https://www.youtube.com/watch?v=qOH-h-EKKac"
    },
    {
        "index": 16,
        "title": "Amit Ramesh, Qui Nguyen   Building Stream Processing Applications   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=CHCC2ITcMfk",
        "video_id": "CHCC2ITcMfk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1823,
        "view_count": 4439,
        "like_count": 38,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Amit Ramesh, Qui Nguyen\n\nDo you have a stream of data that you would like to process in real time? There are many components with Python APIs that you can put together to build a stream processing application. We will go through some common design patterns, tradeoffs and available components / frameworks for designing such systems. We will solve an example problem during the presentation to make these points concrete. Much of what will be presented is based on experience gained from building production pipelines for the real-time processing of ad streams at Yelp. This talk will cover topics such as consistency, availability, idempotency, scalability, etc.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/CHCC2ITcMfk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=CHCC2ITcMfk",
        "original_url": "https://www.youtube.com/watch?v=CHCC2ITcMfk"
    },
    {
        "index": 17,
        "title": "Sam Kitajima Kimbrel   One Data Pipeline to Rule Them All   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=N6riK1Xtyng",
        "video_id": "N6riK1Xtyng",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1791,
        "view_count": 5815,
        "like_count": 58,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Sam Kitajima-Kimbrel\n\nThere are myriad data storage systems available for every use case imaginable, but letting application teams choose storage engines independently can lead to duplicated efforts and wheel reinvention. This talk will explore how to build a reusable data pipeline based on Kafka to support multiple applications, datasets, and use cases including archival, warehousing and analytics, stream and batch processing, and low-latency \"\"hot\"\" storage.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/N6riK1Xtyng/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=N6riK1Xtyng",
        "original_url": "https://www.youtube.com/watch?v=N6riK1Xtyng"
    },
    {
        "index": 18,
        "title": "Education Summit   Morning 2017 05 18",
        "url": "https://www.youtube.com/watch?v=gGnG9FuipsE",
        "video_id": "gGnG9FuipsE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 11137,
        "view_count": 1037,
        "like_count": 6,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/gGnG9FuipsE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=gGnG9FuipsE",
        "original_url": "https://www.youtube.com/watch?v=gGnG9FuipsE"
    },
    {
        "index": 19,
        "title": "Education Summit Afternoon Room A105 2017 05 18",
        "url": "https://www.youtube.com/watch?v=1ze-Zzn4TAA",
        "video_id": "1ze-Zzn4TAA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 9769,
        "view_count": 1237,
        "like_count": 11,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/1ze-Zzn4TAA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=1ze-Zzn4TAA",
        "original_url": "https://www.youtube.com/watch?v=1ze-Zzn4TAA"
    },
    {
        "index": 20,
        "title": "Education Summit Afternoon Room A106 Part01",
        "url": "https://www.youtube.com/watch?v=-GAVgEBfgas",
        "video_id": "-GAVgEBfgas",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 8370,
        "view_count": 599,
        "like_count": 8,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/-GAVgEBfgas/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=-GAVgEBfgas",
        "original_url": "https://www.youtube.com/watch?v=-GAVgEBfgas"
    },
    {
        "index": 21,
        "title": "Al Sweigart   Yes, It's Time to Learn Regular Expressions   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=abrcJ9MpF60",
        "video_id": "abrcJ9MpF60",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1831,
        "view_count": 39820,
        "like_count": 866,
        "comment_count": 29,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Al Sweigart\n\nRegular expressions have a reputation as opaque and inscrutable. However, the basic concepts behind \"\"regex\"\" and text pattern recognition are simple to grasp. This talk is for any programmer who isn't familiar with Python's re module and its best practices. Stop putting it off, it's time to learn regular expressions!\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/abrcJ9MpF60/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=abrcJ9MpF60",
        "original_url": "https://www.youtube.com/watch?v=abrcJ9MpF60"
    },
    {
        "index": 22,
        "title": "Jiaqi Liu   Fuzzy Search Algorithms How and When to Use Them   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=kTS2b6pGElE",
        "video_id": "kTS2b6pGElE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1823,
        "view_count": 7414,
        "like_count": 114,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jiaqi Liu\n\nFuzzy Searching or approximate string matching is powerful because often text data is messy. For example, shorthand and abbreviated text are common in various data sets. In addition, outputs from OCR or voice to text conversions tend to be messy or imperfect. Thus, we want to be able to make the most of our data by extrapolating as much information as possible. \n\nIn this talk, we will explore the various approaches used in fuzzy string matching and demonstrate how they can be used as a feature in a model or a component in your python code. We will dive deep into the approaches of different algorithms such as Soundex, Trigram/n-gram search, and Levenshtein distances and what the best use cases are. We will also discuss situations where it’s important to take into account the meaning or intent of a word and demonstrate approaches for measuring semantic similarity using nltk and word2vec. Furthermore, we will demonstrate via live coding how to implement some of these fuzzy search algorithms using python and/or built-in fuzzy search functions within PostgreSQL.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/kTS2b6pGElE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=kTS2b6pGElE",
        "original_url": "https://www.youtube.com/watch?v=kTS2b6pGElE"
    },
    {
        "index": 23,
        "title": "Lightning talks May 20th, 2017 Evening session session",
        "url": "https://www.youtube.com/watch?v=Aio0whC1iYg",
        "video_id": "Aio0whC1iYg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 3866,
        "view_count": 2579,
        "like_count": 23,
        "comment_count": 6,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/Aio0whC1iYg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Aio0whC1iYg",
        "original_url": "https://www.youtube.com/watch?v=Aio0whC1iYg"
    },
    {
        "index": 24,
        "title": "Paul Everitt, Guido van Rossum   Panel Discussion   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=iOUrf7WSSLc",
        "video_id": "iOUrf7WSSLc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 2853,
        "view_count": 7688,
        "like_count": 58,
        "comment_count": 5,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Paul Everitt, Guido van Rossum\n\nPanel Discussion\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/iOUrf7WSSLc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=iOUrf7WSSLc",
        "original_url": "https://www.youtube.com/watch?v=iOUrf7WSSLc"
    },
    {
        "index": 25,
        "title": "Lightning talks May 21th, 2017 Morning session",
        "url": "https://www.youtube.com/watch?v=SXl-pZnoaQ0",
        "video_id": "SXl-pZnoaQ0",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1823,
        "view_count": 1444,
        "like_count": 11,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/SXl-pZnoaQ0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=SXl-pZnoaQ0",
        "original_url": "https://www.youtube.com/watch?v=SXl-pZnoaQ0"
    },
    {
        "index": 26,
        "title": "Filipe Pires Alvarenga Fernandes   Community powered packaging conda forge   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=qJFkIuzD6tI",
        "video_id": "qJFkIuzD6tI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1851,
        "view_count": 810,
        "like_count": 20,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Filipe Pires Alvarenga Fernandes\n\nThe Python scientific community always wanted a package manager that is cross platform,\ndoes not require `sudo`,\nand lets Python be awesome!\nThe conda package manager solved that problem, but created a new ones...\n\nThis talk is a tour disguised as a beginner tutorial to `conda-forge` packaging.\nWe will try to discuss some myths and misconceptions about `conda` and `conda-forge`,\nas well as a quick comparison with `pip` and `wheels`.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/qJFkIuzD6tI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=qJFkIuzD6tI",
        "original_url": "https://www.youtube.com/watch?v=qJFkIuzD6tI"
    },
    {
        "index": 27,
        "title": "PSF Community Service Awards",
        "url": "https://www.youtube.com/watch?v=XD8kXx_Thkk",
        "video_id": "XD8kXx_Thkk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 671,
        "view_count": 216,
        "like_count": 2,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: \n\nPSF Community Service Awards\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/XD8kXx_Thkk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=XD8kXx_Thkk",
        "original_url": "https://www.youtube.com/watch?v=XD8kXx_Thkk"
    },
    {
        "index": 28,
        "title": "David Dumas   Python for mathematical visualization a four dimensional case study   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=HYVr-b46VJo",
        "video_id": "HYVr-b46VJo",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1853,
        "view_count": 7943,
        "like_count": 115,
        "comment_count": 5,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: David Dumas\n\nThis is a talk about creating pictures of a mathematical object---specifically, a 4-dimensional fractal \"\"dust\"\" that has been the subject of mathematical research in hyperbolic geometry since the 1980s.  In the end this is accomplished using a little algebra, a little geometry, and a healthy dose of Python.\n\nThat is, I will present a case study of using Python in several aspects of a mathematical visualization project, from the computation itself, to transforming and converting data, and finally for scripting the process of generating the images.  Along the way I'll explain how Python's convenient idioms and containers (e.g. sets and set comprehensions) are a good fit for some of the algebraic and geometric questions that come up, how Scipy and Numpy enable fast numerical calculations, and how Python's strength as a language for scripting and automation allows easy orchestration of rendering of still images and frames of animations.\n\nThe mathematical visualization project we describe is a collaboration with François Guéritaud (Université de Lille).\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/HYVr-b46VJo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=HYVr-b46VJo",
        "original_url": "https://www.youtube.com/watch?v=HYVr-b46VJo"
    },
    {
        "index": 29,
        "title": "Jake VanderPlas   The Python Visualization Landscape   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=FytuB8nFHPQ",
        "video_id": "FytuB8nFHPQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 2010,
        "view_count": 54593,
        "like_count": 892,
        "comment_count": 22,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jake VanderPlas\n\nSo you want to visualize some data in Python: which library do you choose? From Matplotlib to Seaborn to Bokeh to Plotly, Python has a range of mature tools to create beautiful visualizations, each with their own strengths and weaknesses. In this talk I’ll give an overview of the landscape of dataviz tools in Python, as well as some deeper dives into a few, so that you can intelligently choose which library to turn to for any given visualization task.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/FytuB8nFHPQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=FytuB8nFHPQ",
        "original_url": "https://www.youtube.com/watch?v=FytuB8nFHPQ"
    },
    {
        "index": 30,
        "title": "Jean Baptiste Aviat   Writing a C Python extension in 2017   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=phe1s6p38gk",
        "video_id": "phe1s6p38gk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1722,
        "view_count": 7329,
        "like_count": 77,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jean-Baptiste Aviat\n\nThis talk describes the build of a C Python extension, with prebuilt binaries, in 2017, where modern packaging standards, as well as Docker, have been a game changer in the Python extensions world. Most examples come from our experience building [PyMiniRacer][1], an embedded Python / JavaScript bridge used in production across hundreds of companies.\n\nWe will describe the different aspects of building a binary extension, including:\n\n-  using the modern manylinux wheel type in order to ship a built binary, usable in most Linux distributions;\n- the choices offered to developers when building an extension: the Python public C API, cffi, ...;\n- testing of a binary module across various platforms;\n- troubleshooting & debugging an extension: the basics you need to tackle most common issues.\n\n  [1]: https://github.com/sqreen/PyMiniRacer\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/phe1s6p38gk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=phe1s6p38gk",
        "original_url": "https://www.youtube.com/watch?v=phe1s6p38gk"
    },
    {
        "index": 31,
        "title": "Alex Orlov   Cython as a Game Changer for Efficiency   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=_1MSX7V28Po",
        "video_id": "_1MSX7V28Po",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1648,
        "view_count": 19129,
        "like_count": 376,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Alex Orlov\n\nAre you running a Web application? Do you suffer from CPU bottlenecks that slow down your growth? There's a tool that can easily fix all that, and then some. C++ knowledge not required.\n\nCome learn how Instagram, the world's largest Django deployment with more than 600M active users, saved ~30% of global CPU by rewriting a handful of modules on the critical path in Cython. Learn to apply those techniques to your own projects with little effort and stop worrying about switching to other programming languages or rewriting stable components in C++.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/_1MSX7V28Po/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=_1MSX7V28Po",
        "original_url": "https://www.youtube.com/watch?v=_1MSX7V28Po"
    },
    {
        "index": 32,
        "title": "Sofia Heisler   No More Sad Pandas Optimizing Pandas Code for Speed and Efficiency   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=HN5d490_KKk",
        "video_id": "HN5d490_KKk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1770,
        "view_count": 56479,
        "like_count": 1298,
        "comment_count": 19,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Sofia Heisler\n\nWhen I first began working with the Python Pandas library, I was told by an experienced Python engineer: \"\"Pandas is fine for prototyping a bit of calculations, but it's too slow for any time-sensitive applications.\"\" Over multiple years of working with the Pandas library, I have realized that this was only true if not enough care is put into identifying proper ways to optimize the code's performance. This talk will review some of the most common beginner pitfalls that can cause otherwise perfectly good Pandas code to grind to a screeching halt, and walk through a set of tips and tricks to avoid them. Using a series of examples, we will review the process for identifying the elements of the code that may be causing a slowdown, and discuss a series of optimizations, ranging from good practices of input data storage and reading, to the best methods for avoiding inefficient iterations, to using the power of vectorization to optimize functions for Pandas dataframes.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/HN5d490_KKk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=HN5d490_KKk",
        "original_url": "https://www.youtube.com/watch?v=HN5d490_KKk"
    },
    {
        "index": 33,
        "title": "Lynn Root   Tracing, Fast and Slow Digging into and improving your web service’s performance",
        "url": "https://www.youtube.com/watch?v=lu0F-psmBzc",
        "video_id": "lu0F-psmBzc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1904,
        "view_count": 1826,
        "like_count": 22,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Lynn Root\n\nDo you maintain a [Rube Goldberg](https://s-media-cache-ak0.pinimg.com/564x/92/27/a6/9227a66f6028bd19d418c4fb3a55b379.jpg)-like service? Perhaps it’s highly distributed? Or you recently walked onto a team with an unfamiliar codebase? Have you noticed your service responds slower than molasses? This talk will walk you through how to pinpoint bottlenecks, approaches and tools to make improvements, and make you seem like the hero! All in a day’s work.\n\nThe talk will describe various types of tracing a web service, including black & white box tracing, tracing distributed systems, as well as various tools and external services available to measure performance. I’ll also present a few different rabbit holes to dive into when trying to improve your service’s performance.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/lu0F-psmBzc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=lu0F-psmBzc",
        "original_url": "https://www.youtube.com/watch?v=lu0F-psmBzc"
    },
    {
        "index": 34,
        "title": "Aaron Hall   Slot or not higher performance custom objects in pure Python    PyCon 2017",
        "url": "https://www.youtube.com/watch?v=N7MfisN44nY",
        "video_id": "N7MfisN44nY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1782,
        "view_count": 2535,
        "like_count": 23,
        "comment_count": 9,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Aaron Hall\n\n__slots__ are versatile for certain kinds of uses and users, if you know how they work. \n\nAt first glance, they seem like a free lunch, with improvements in both time and space. At second glance, they seem to have so many caveats to make them not worth using. \n\nThis talk is a deep dive into how __slots__ work, how to wring every benefit out, as well as the actual caveats and alternatives, with recommendations for writers of core libraries as well as end users.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/N7MfisN44nY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=N7MfisN44nY",
        "original_url": "https://www.youtube.com/watch?v=N7MfisN44nY"
    },
    {
        "index": 35,
        "title": "Łukasz Langa   Unicode what is the big deal   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=7m5JA3XaZ4k",
        "video_id": "7m5JA3XaZ4k",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1861,
        "view_count": 5076,
        "like_count": 114,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Łukasz Langa\n\nEver wondered why people complain that text processing is a hard problem? Or why Python 3 would introduce such a big backward incompatibility with switching to Unicode? Wonder no more, this talk is for you.\n\nIn 30 minutes I'm going to demonstrate real world text processing problems and how Python 3 helps solve them. The talk is going to explain how you should split your text from binary data in your application, what are sensible defaults and what are possible gotchas. All this sprinkled with a healthy dose of frustration by a guy whose first name starts with Ł.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/7m5JA3XaZ4k/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=7m5JA3XaZ4k",
        "original_url": "https://www.youtube.com/watch?v=7m5JA3XaZ4k"
    },
    {
        "index": 36,
        "title": "Lightning talks May 19th, 2017 Evening session",
        "url": "https://www.youtube.com/watch?v=tK6ZIf0yYhs",
        "video_id": "tK6ZIf0yYhs",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 3528,
        "view_count": 2500,
        "like_count": 14,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/tK6ZIf0yYhs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=tK6ZIf0yYhs",
        "original_url": "https://www.youtube.com/watch?v=tK6ZIf0yYhs"
    },
    {
        "index": 37,
        "title": "Jake Vanderplas - Keynote - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=ZyjCqQEUa8o",
        "video_id": "ZyjCqQEUa8o",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 2331,
        "view_count": 22570,
        "like_count": 356,
        "comment_count": 9,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jake Vanderplas\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ZyjCqQEUa8o/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ZyjCqQEUa8o",
        "original_url": "https://www.youtube.com/watch?v=ZyjCqQEUa8o"
    },
    {
        "index": 38,
        "title": "Welcome to Pycon 2017",
        "url": "https://www.youtube.com/watch?v=xNVFs3ao23U",
        "video_id": "xNVFs3ao23U",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1227,
        "view_count": 1738,
        "like_count": 8,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi_webp/xNVFs3ao23U/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xNVFs3ao23U",
        "original_url": "https://www.youtube.com/watch?v=xNVFs3ao23U"
    },
    {
        "index": 39,
        "title": "Alex Gartrell   Executing python functions in the linux kernel by transpiling to bpf   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=CpqMroMBGP4",
        "video_id": "CpqMroMBGP4",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 2146,
        "view_count": 2538,
        "like_count": 38,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Alex Gartrell\n\n`ebpf` is a linux kernel byte-code which can be used for functionality ranging from tracing system calls with kprobe to routing packets with tc.  This talk is about a pure-python front-end for ebpf that allows users to write simple python functions to be executed in the kernel.  I'll first explain how this was made to work and then I'll show off some of the features/capabilities of this approach with working examples.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/CpqMroMBGP4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=CpqMroMBGP4",
        "original_url": "https://www.youtube.com/watch?v=CpqMroMBGP4"
    },
    {
        "index": 40,
        "title": "Russell Keith Magee   How to write a Python transpiler   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=9c4DEYIXYCM",
        "video_id": "9c4DEYIXYCM",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1843,
        "view_count": 8814,
        "like_count": 212,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Russell Keith-Magee\n\nWe all know Python is a powerful and expressive programming language. What you may not know is how much of the internals of Python itself is exposed for you to use and manipulate.\n\nIn this talk, you'll be introduced to the tools and libraries Python provides to manipulate the compilation and execution of Python code. You will also see how you can use those tools to target execution environments other than the CPython virtual machine.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/9c4DEYIXYCM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=9c4DEYIXYCM",
        "original_url": "https://www.youtube.com/watch?v=9c4DEYIXYCM"
    },
    {
        "index": 41,
        "title": "Dustin Ingram   The Fastest FizzBuzz in the West Make Your Own Language with RPLY and RPython",
        "url": "https://www.youtube.com/watch?v=ApgUrtCrmV8",
        "video_id": "ApgUrtCrmV8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170521",
        "duration": 1488,
        "view_count": 1508,
        "like_count": 34,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Dustin Ingram\n\nIn this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.\n\nWe'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a \"\"cooler\"\" API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ApgUrtCrmV8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ApgUrtCrmV8",
        "original_url": "https://www.youtube.com/watch?v=ApgUrtCrmV8"
    },
    {
        "index": 42,
        "title": "Jessica Forde   An Introduction to Reinforcement Learning   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=k1UuTyW2uFc",
        "video_id": "k1UuTyW2uFc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2263,
        "view_count": 3571,
        "like_count": 34,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jessica Forde\n\nReinforcement learning (RL) is a subfield of machine learning focused on building agents: software that can robustly achieve a desired objective under varying states of the world. This introduction will provide you with an overview of RL and tools to build your own agents.  In this talk, we will provide an overview of terminology in reinforcement learning and a Jupyter Notebook outlining basic algorithms to learn 'policies', strategies for an agent, and visualize them with numpy, pandas, and seaborn.  Newer developments in reinforcement learning apply deep learning to improve performance.  We will further discuss deep reinforcement learning and how to use deep learning libraries, such as TensorFlow or Theano, with the latest RL libraries: [OpenAI Gym][1], [OpenAI Universe](https://universe.openai.com), and [DeepMind Lab](https://github.com/deepmind/lab).\n\n  [1]: https://gym.openai.com\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/k1UuTyW2uFc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=k1UuTyW2uFc",
        "original_url": "https://www.youtube.com/watch?v=k1UuTyW2uFc"
    },
    {
        "index": 43,
        "title": "Tony Ojeda   Human Machine Collaboration for Improved Analytical Processes   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=s0u_UkVecx0",
        "video_id": "s0u_UkVecx0",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1766,
        "view_count": 650,
        "like_count": 7,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Tony Ojeda\n\nOver the last several years, Python developers interested in data science and analytics have acquired a variety of tools and libraries that aim to facilitate analytical processes. Libraries such as Pandas, Statsmodels, Scikit-learn, Matplotlib, Seaborn, and Yellowbrick have made tasks such as data wrangling, statistical modeling, machine learning, and data visualization much quicker and easier. They have accomplished this by automating and abstracting away some of the more tedious, repetitive processes involved with analyzing and modeling data. \n\nOver the next few years, we are sure to witness the introduction of new tools that are increasingly intelligent and have the ability to automate more complex analytical processes. However, as we begin using these tools (and developing new ones), we should strongly consider the level of automation that is most appropriate for each case. Some analytical processes are technically difficult to automate, and therefore require large degrees of human steering. Others are relatively easy to automate but perhaps should not be due to the unpredictability of results or outputs requiring a level of compassionate decision-making that machines simply don’t possess. Such processes would benefit greatly from the collaboration between automated machine tasks and uniquely human ones. After all, it is often systems that utilize a combination of both human and machine intelligence that achieve better results than either could on their own. \n\nIn this talk, we will discuss human-machine collaboration as it applies to analyzing data with Python. We will review a framework for exploratory data analysis with the goal of identifying which tasks should be automated, which tasks should not, and which tasks would benefit from a more interactive, symbiotic, and collaborative process between the human and the machine. We will explore Python libraries that we can use to build tools that allow us to perform different types of analysis. We’ll also introduce the Cultivar project, an example of a hybrid analytics tool that combines a Django framework with Javascript visualizations and Celery for task management to facilitate more efficient and effective human-machine systems for data analysis. \n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/s0u_UkVecx0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=s0u_UkVecx0",
        "original_url": "https://www.youtube.com/watch?v=s0u_UkVecx0"
    },
    {
        "index": 44,
        "title": "Deborah Hanus   Lights, camera, action! Scraping a great dataset to predict Oscar winners",
        "url": "https://www.youtube.com/watch?v=kWtffImyfp8",
        "video_id": "kWtffImyfp8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1605,
        "view_count": 1295,
        "like_count": 19,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Deborah Hanus\n\nUsing Jupyter notebooks and scikit-learn, you’ll predict whether a movie is likely to [win an Oscar](http://oscarpredictor.github.io/) or be a box office hit. Together, we’ll step through the creation of an effective dataset: asking a question your data can answer, writing a web scraper, and answering those questions using nothing but Python libraries and data from the Internet. \n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/kWtffImyfp8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=kWtffImyfp8",
        "original_url": "https://www.youtube.com/watch?v=kWtffImyfp8"
    },
    {
        "index": 45,
        "title": "Ending Py2Py3 compatibility in a user friendly manner   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=2DkfPzWWC2Q",
        "video_id": "2DkfPzWWC2Q",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1896,
        "view_count": 1879,
        "like_count": 19,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Matthias Bussonnier, Min Ragan-Kelley, M Pacer, Thomas Kluyver\n\n\"\"Four shalt thou not count, neither count thou two, excepting that thou\nthen proceed to three.\"\"\n\n Monty Python and the Holy Grail; Scene 33\n\nPython 3 has been around for more than eight years, and much of the Python\necosystem is now available both on Python 2 and Python 3, often using a single\ncode base. Nonetheless, this compatibility comes at a development cost and some\nlibrary authors are considering ending support for Python 2 . These\nonce-python-2-compatible libraries are at risk of being upgraded on non\ncompatible system and cause user (and developer) frustration.\n\nWhile it may seem simple to cease support for Python 2, the challenge is not in\nending support, but doing so in a way that does not wreak havoc for users who\nstay on Python 2. And that is not only a communications problem, but a\ntechnical one : up until recently, it was impossible to tag a release as Python\n3 only; today it is possible.\n\nLike any maintainer of a widely used library, we want to ensure that users\ncontinue to use Python 2 continue to have functioning libraries, even after\ndevelopment proceeds in a way that does not support Python 2. \n\nOne approach is to ensure easy installation of older versions if possible avoid\nincompatible versions altogether. Users should not need to manually pin maximal\nversion dependencies across their development environments and projects if all\nthey want is to use the latest versions of libraries that are compatible with\ntheir system.\n\nEven if we did expect that of users, consider what would happen when a package\nthey rely on converts to be only Python 3 compatible. If they were not tracking\nthe complete dependency tree, they might discover, on  upgrade, that their\nprojects no longer work. To avert this they would need to pin those at the last\nversion compatible with Python 2. Users that want to use older python versions\nshould not have to go through so much anguish to do so. \n\nIn order to solve this problem, and thereby make both users' and maintainers'\nlives easier, we ventured into the rabbit-hole called Packaging.\n\nThough we set off with a singular quest, our tale roves through many lands.\nWe'll narrate the story of our amending PEPs, our efforts in building the\nramparts of the pypa/Warehouse Castle, battles with the dragons of Pip, and\nerrands in the \"\"land of no unit tests\"\" otherwise known as PyPI legacy.\n\nBy the end of the above tale, the audience members will know the road to Python\n3 only libraries had once had hazards that are now easily avoidable. So long as\nusers upgrade their package management tools.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/2DkfPzWWC2Q/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=2DkfPzWWC2Q",
        "original_url": "https://www.youtube.com/watch?v=2DkfPzWWC2Q"
    },
    {
        "index": 46,
        "title": "Ashwini Oruganti, Mark Williams   Designing secure APIs with state machines    PyCon 2017",
        "url": "https://www.youtube.com/watch?v=MtHscXjWbVs",
        "video_id": "MtHscXjWbVs",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1422,
        "view_count": 2504,
        "like_count": 25,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Ashwini Oruganti, Mark Williams\n\nDid you ever need to create an application whose behavior varies with its state, while still presenting a consistent interface to its callers? A good, layered design using state machines can help avoid the tedious 'if' checks for flags, and ensure that if your code runs at all, it will run with all the required values initialized.  I will demonstrate this with examples, and talk about some available tools and libraries to build state machines in Python.      \n\nI will also discuss how to effectively use the process of threat modeling to build secure web applications. Threat modeling is a computer security technique that helps you better understand the systems you create, identify attacks, and build defenses. I will talk about things that we, as software developers, can do to assess the security of our applications in the real world through this process.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/MtHscXjWbVs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=MtHscXjWbVs",
        "original_url": "https://www.youtube.com/watch?v=MtHscXjWbVs"
    },
    {
        "index": 47,
        "title": "Sep Dehpour   Magic Method, on the wall, who, now, is the `  fairest  ` one of all   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=9TfDYds8WPg",
        "video_id": "9TfDYds8WPg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1529,
        "view_count": 1561,
        "like_count": 20,
        "comment_count": 6,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Sep Dehpour\n\nMagic methods are a very powerful feature of Python and can open a whole new door for you. However, with great power comes great responsibility.\n\nIn this talk we explore magic method's capabilities by first designing new interfaces in a series of fun experiments. Secondly, we play with creating undeletable objects and learn about the mighty Garbage Collector in cPython and how a single magic method can overturn the fate of the object. Lastly, we create a lazy Redis client to illustrate a practical application of magic methods and learn about lazy loading.\n\nOnce you see what magic methods can bring to the table, the limit is only your imagination!\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/9TfDYds8WPg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=9TfDYds8WPg",
        "original_url": "https://www.youtube.com/watch?v=9TfDYds8WPg"
    },
    {
        "index": 48,
        "title": "Mali Akmanalp   Library UX Using abstraction towards friendlier APIs   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=W8Rxd9OPblI",
        "video_id": "W8Rxd9OPblI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1786,
        "view_count": 943,
        "like_count": 15,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Mali Akmanalp\n\nComplicated libraries can be a pain in the butt to use. It's not surprising that there are a lot of \"\"X for humans\"\" libraries out there, some of which are mostly wrappers around more frustrating interfaces.\n\nThis is not a theoretical talk. I'll touch upon theory to give you context, but will then talk about what that means for you in practice so that you can write better libraries. I'll talk about why library UX matters, about abstraction as a general concept, about out what happens when you over/under abstract, and about some useful tips to help build friendly APIs. Meanwhile, I'll show some positive examples from libraries we know and love (flask, SQLAlchemy, Requests, etc). Once you recognize these effects in play, you'll be able to apply them to your own code and make life better for everyone!\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/W8Rxd9OPblI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=W8Rxd9OPblI",
        "original_url": "https://www.youtube.com/watch?v=W8Rxd9OPblI"
    },
    {
        "index": 49,
        "title": "Morgan Wahl   Text is More Complicated Than You Think Comparing and Sorting Unicode   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=bx3NOoroV-M",
        "video_id": "bx3NOoroV-M",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2362,
        "view_count": 1394,
        "like_count": 38,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Morgan Wahl\n\nFew people realize just how complicated text can be. Did you know sorting and even case-folding can depend on a user's locale? That different strings of characters can be semantically completely equivalent? That there are over a thousand Latin letters?\n\nLegacy text encodings like ASCII made a lot of simplifying assumptions about how written languages work, and we all put up with them because it was cool to even have computers in the first place. Unicode removes many of those assumptions and provides the tools we need to write software that can just do the right thing regardless of what text users throw at it. Even if you don't translate your UI, getting the details of string comparison, sorting, and searching right can eliminate annoying surprises for you and your users.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/bx3NOoroV-M/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=bx3NOoroV-M",
        "original_url": "https://www.youtube.com/watch?v=bx3NOoroV-M"
    },
    {
        "index": 50,
        "title": "Flávio Juvenal   How to make a good library API   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=4mkFfce46zE",
        "video_id": "4mkFfce46zE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1685,
        "view_count": 6995,
        "like_count": 140,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Flávio Juvenal\n\nIt's not easy to write libraries with great APIs. We're aware of that. However, it's not always clear how we can follow abstract ideals like elegance, simplicity, and extensibility to improve our APIs. That's why in this talk we'll discuss good and bad APIs with real-world examples. For each thing learned, we'll come up with a checklist to help us with practical advice for writing good APIs.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/4mkFfce46zE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=4mkFfce46zE",
        "original_url": "https://www.youtube.com/watch?v=4mkFfce46zE"
    },
    {
        "index": 51,
        "title": "Brandon Rhodes   The Dictionary Even Mightier   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=66P5FMkWoVU",
        "video_id": "66P5FMkWoVU",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2842,
        "view_count": 32487,
        "like_count": 606,
        "comment_count": 13,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Brandon Rhodes\n\nSince my “Mighty Dictionary” talk at PyCon 2010, the Python dictionary has evolved dramatically. Come learn about all of the the improvements, up to and including the re-architecture that has just landed with Python 3.6! The talk will discuss iterable views, the dictionary’s dedicated comprehension syntax, random key ordering, the special key-sharing dictionary designed to underlie object collections, and, most famously of all, the new “compact dictionary” that cuts dictionary storage substantially — and carries a fascinating side-effect.\n\nEach new feature that the talk discusses will be motivated by considering the trade-offs inherent in hash table data structure design, and followed up with hints about how you can now use the dictionary even more effectively in your own code!\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/66P5FMkWoVU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=66P5FMkWoVU",
        "original_url": "https://www.youtube.com/watch?v=66P5FMkWoVU"
    },
    {
        "index": 52,
        "title": "Katie Silverio   Decorators, unwrapped How do they work   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=UBSyD1RkOX0",
        "video_id": "UBSyD1RkOX0",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1848,
        "view_count": 10158,
        "like_count": 152,
        "comment_count": 15,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Katie Silverio\n\nDecorators are a syntactically-pleasing way of modifying the behavior of functions in Python. However, they can be highly opaque to Python beginners. It took me a while to learn how to write one, and even after I was confident writing my own decorators, felt like they were magical. The goal of this talk is to demystify decorators by methodically stepping through how and why they work. Along the way we'll touch on closures, scopes, and how Python is compiled.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/UBSyD1RkOX0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=UBSyD1RkOX0",
        "original_url": "https://www.youtube.com/watch?v=UBSyD1RkOX0"
    },
    {
        "index": 53,
        "title": "Thomas Ballinger   Know thy self Methods and method binding   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=byff9LhYXOg",
        "video_id": "byff9LhYXOg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1542,
        "view_count": 2878,
        "like_count": 40,
        "comment_count": 8,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Thomas Ballinger\n\nMethods are like functions, but different. How? Why? And what's will having to type \"\"self\"\" all the time?\n\nWe'll explore partial application of functions and review why it might be nice to start using classes. Then to clarify how method objects work we'll examine the result of accessing the method attributes of an object without calling them. Understanding the behavior we uncover here will require more attribute lookup experiments, which will lead us discover the power of descriptors.\n\nAlong the way we'll peek in at other languages' approaches to method binding, hopefully coming to appreciate the way Python does things enough to type \"\"self\"\" a few thousand more times.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/byff9LhYXOg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=byff9LhYXOg",
        "original_url": "https://www.youtube.com/watch?v=byff9LhYXOg"
    },
    {
        "index": 54,
        "title": "Tom Christie   Level up! Rethinking the Web API framework    PyCon 2017",
        "url": "https://www.youtube.com/watch?v=Rk6MHZdust4",
        "video_id": "Rk6MHZdust4",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2461,
        "view_count": 10085,
        "like_count": 132,
        "comment_count": 5,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Tom Christie\n\nThink there's nothing left to explore in how we design Web API frameworks? Think again.\n\nThe author of Django REST framework walks through how we might approach designing a new Python-based API framework from scratch, and looks at how we can start building smarter, more productive API tooling as a result.\n\nYou should come away from this talk with a better appreciation of:\n\n* How best to provide API client libraries and API documentation to your users.\n* How to build APIs that support both realtime and request/response interfaces.\n* How to build APIs that are web-browsable.\n* Why you might want to consider taking a schema-first approach to your API design.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/Rk6MHZdust4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Rk6MHZdust4",
        "original_url": "https://www.youtube.com/watch?v=Rk6MHZdust4"
    },
    {
        "index": 55,
        "title": "Daniele Procida   How documentation works, and how to make it work for your project   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=azf6yzuJt54",
        "video_id": "azf6yzuJt54",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1954,
        "view_count": 10940,
        "like_count": 226,
        "comment_count": 6,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Daniele Procida\n\nNearly everyone (especially in the Python community) agrees that good documentation is important to the success of software projects, and yet very few projects actually have good documentation.\n\nOften, it's _not for want of effort_ - the project's developers have worked hard on it - _nor for lack of documentation_ - the authors have produced a lot of it. \n\n_It simply turns out to be not very good_ - not helpful enough for the users who should be able to rely on it, and a depressing chore for the authors who have to maintain it.\n\nThe good news is that both these problems can be solved by understanding _how documentation works_, and what its different functions are. Structuring documentation according to those distinct functions helps ensure that each of them is adequately served. It also makes it far easier to write and maintain.\n\nUsing real-life examples I'll draw out the key functions of documentation, and how they map onto different ways of writing it. Putting this into practice is simple when armed with some basic guidelines. The benefits are huge, and available with a minimum of effort.\n\nI won't be discussing documentation tools or software or other topics that have been covered amply elsewhere, but some neglected aspects of software documentation that **will make your software projects more successful**.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/azf6yzuJt54/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=azf6yzuJt54",
        "original_url": "https://www.youtube.com/watch?v=azf6yzuJt54"
    },
    {
        "index": 56,
        "title": "Anwesha Das   The trends in choosing licenses in Python ecosystem   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=ikT2i4I2LYY",
        "video_id": "ikT2i4I2LYY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1620,
        "view_count": 905,
        "like_count": 8,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Anwesha Das\n\nThe software licenses are the permissions over copyrighted software. The permission and/ grant includes the grant to use, to redistribute, to prepare derivative works etc. These software licenses also set forth the limitations over these aforesaid rights. The software licenses basically marks the boundary for the usage of the code.\n\nTherefore from the above mentioned introduction it very clear that it is very important for developers to choose the license for their code wisely and correctly.\n\nPyPI, the Python Package Index is a repository of software for the Python programming language. There are currently 80000+ packages there.\n\nThis talk will go through the licenses of the top 2500 packages. We will see the trend of choosing a license for these top Python projects. We will discuss the licenses individually, compare them with each other. the advantages and disadvantages of the same.\n\nWe will further explain that why a license and/or licenses are being favored by the developers.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ikT2i4I2LYY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ikT2i4I2LYY",
        "original_url": "https://www.youtube.com/watch?v=ikT2i4I2LYY"
    },
    {
        "index": 57,
        "title": "Amjith Ramanujam   Awesome Command Line Tools   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=hJhZhLg3obk",
        "video_id": "hJhZhLg3obk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1722,
        "view_count": 29521,
        "like_count": 720,
        "comment_count": 20,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Amjith Ramanujam\n\nDesigning a good command line tool is challenging. Command line tools look archaic compared to modern graphical interfaces, discoverability is a big issue for command line tools, proactive help is hard to implement. This talk will cover a set of specific techniques to help alleviate those challenges.\n\nHow did [pgcli](http://pgcli.com) and [mycli](http://mycli.net) overcome these problems? We will cover specific examples where command line apps shine. The examples will be drawn from pgcli, mycli and [bpython](http://bpython-interpreter.org/). This talk will suggest libraries and show how they can help you implement a wonderful command line interface. \n\nThe libraries covered in this talk include [python-prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit),  [pygments](http://pygments.org/), [click](http://click.pocoo.org/), [fuzzyfind](https://github.com/amjith/fuzzyfinder).\n\nThe goal of the talk is to distil the ideas that exist in successful command line applications as guidelines for building powerful command line applications.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/hJhZhLg3obk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=hJhZhLg3obk",
        "original_url": "https://www.youtube.com/watch?v=hJhZhLg3obk"
    },
    {
        "index": 58,
        "title": "Lisa N Roach   Exploring Network Programmability with Python and YANG   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=hKxbO4rRlpg",
        "video_id": "hKxbO4rRlpg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1878,
        "view_count": 5539,
        "like_count": 127,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Lisa N Roach\n\nRecently, networking vendors and Silicon Valley giants have been putting forth a concerted effort to build standardized models for networking devices. These models allow for building reusable and versatile scripts with predictable, standardized data. Without such models, the wide variety of inputs and outputs required by different devices and vendors made scripting a tedious and challenging endeavor. The modeling language in use is called YANG, and a variety of standards have emerged. A vendor agnostic standard called OpenConfig has lately become stable enough to begin programming devices with it. Using Python, YANG is surprisingly easy to work with, and extremely powerful applications can be written with basic knowledge of JSON or XML and RPCs. \n\nThe talk will start with use-cases for programming networking devices, and will detail a specific, trivial, use case that will be used in the talk. Next, we will discuss the ‘legacy’ way of programming devices (SSH and screenscraping), and highlight the challenges, such as complex regular expressions, slow responses, and lack of reusability between devices. From there we will dive into YANG, focusing on OpenConfig models. A YANG model is essentially a template, and JSON or XML can be mapped to the YANG template. This makes it perfect for Pythonic manipulation. In the use case there will be a GET RPC returning a YANG representation of the box’s state in JSON, which we will search for the relevant health indicator by drilling down in the JSON dictionary. A simple change to the dictionary will remediate the problem, and a PATCH RPC merges the new configuration onto the box. Since open, standard models are in use, this script could be run on many devices across a network to achieve the same effect with no changes needed. We will finish up with the pros and cons of YANG before opening the talk for Q&A.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/hKxbO4rRlpg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=hKxbO4rRlpg",
        "original_url": "https://www.youtube.com/watch?v=hKxbO4rRlpg"
    },
    {
        "index": 59,
        "title": "Moshe Zadka   Automate AWS With Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=OnOWpBmhvoA",
        "video_id": "OnOWpBmhvoA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1750,
        "view_count": 2271,
        "like_count": 15,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Moshe Zadka\n\nAWS is one of the best-known cloud vendors.\nUsing the Web UI is fine when starting out,\nbut automating cloud operations is important.\nBoto3 provides a great Pythonic API to AWS,\nbut using it correctly can be subtle.\n\nThe talk will cover how to automate AMI builds,\nbuilding Cloud Formation Templates and\nautomating S3 bucket management.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/OnOWpBmhvoA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=OnOWpBmhvoA",
        "original_url": "https://www.youtube.com/watch?v=OnOWpBmhvoA"
    },
    {
        "index": 60,
        "title": "Raymond Hettinger   Modern Python Dictionaries    A confluence of a dozen great ideas   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=npw4s1QTmPg",
        "video_id": "npw4s1QTmPg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2257,
        "view_count": 80300,
        "like_count": 1405,
        "comment_count": 52,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Raymond Hettinger\n\nPython's dictionaries are stunningly good.  Over the years,\nmany great ideas have combined together to produce the\nmodern implementation in Python 3.6.\n\nThis fun talk uses pictures and little bits of pure python\ncode to explain all of the key ideas and how they evolved\nover time.\n\nIncludes newer features such as key-sharing, compaction, and versioning.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/npw4s1QTmPg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=npw4s1QTmPg",
        "original_url": "https://www.youtube.com/watch?v=npw4s1QTmPg"
    },
    {
        "index": 61,
        "title": "Kavya Joshi   The Memory Chronicles A Tale of Two Pythons   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=d7qEzpnkWaY",
        "video_id": "d7qEzpnkWaY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1728,
        "view_count": 3648,
        "like_count": 69,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Kavya Joshi\n\nMicroPython is the leanest, meanest full Python implementation. Designed for microcontrollers, this variant of Python runs in less than 300KB of memory, _and_ retains support for all your favorite Python features. \n\nSo what does it take to make the smallest Python? Put differently, why does CPython have a large memory footprint?\n\nThis talk will explore the internals of MicroPython and contrast it with CPython, focusing on the aspects that relate to memory use. We will delve into the Python object models in each and the machinery for managing them. We will touch upon how the designs of the bytecode compiler and interpreter of each differ and why that matters. \n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/d7qEzpnkWaY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=d7qEzpnkWaY",
        "original_url": "https://www.youtube.com/watch?v=d7qEzpnkWaY"
    },
    {
        "index": 62,
        "title": "David Wolever: When the abyss gazes back staring down Python's surprising internals   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=s5_5XmmwMx8",
        "video_id": "s5_5XmmwMx8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1812,
        "view_count": 4261,
        "like_count": 72,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "Speaker: David Wolever\n\nPython's fantastic until it isn't.  This talk dives into some of the surprising implementation details of CPython, then explains exactly how they could be discovered from first principles.  \n\nAttendees will leave with some dangerous Python trivia, and the tools they'll need to uncovery their own trivia when surprises strike.\n\nThe talk takes a deep dive into a StackOverflow question asking why `\"x\" in (\"x\", )` is faster than `\"x\" == \"x\"` (http://stackoverflow.com/questions/28885132/why-is-x-in-x-faster-than-x-x/28885213#28885213), including a discussion of `dis.disassemble`, the Pyhton stack machine, and reading the CPython source. If time permits, there will be other fun examples, a whirlwind tour of debugging, and a couple of homework assignments.\n\nSlides: https://github.com/PyCon/2017-slides/tree/master/David%20Wolever%20-%20When%20The%20Abys%20Gazes%20Back",
        "thumbnail": "https://i.ytimg.com/vi_webp/s5_5XmmwMx8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=s5_5XmmwMx8",
        "original_url": "https://www.youtube.com/watch?v=s5_5XmmwMx8"
    },
    {
        "index": 63,
        "title": "Brett Cannon   What's new in Python 3 6   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=c2rEbbGLPQc",
        "video_id": "c2rEbbGLPQc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1686,
        "view_count": 12408,
        "like_count": 112,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Brett Cannon\n\nPython 3.6 has turned out to be quite the release! With [16 Python Enhancement Proposals](https://www.python.org/dev/peps/pep-0494/) incorporated into the version, Python 3.6 is only surpassed by Python 3.0 for having more [PEPs](https://www.python.org/dev/peps/) included in a single release. This talk will be an overview of those 16 PEPs and other changes outlined in the [What's New](https://docs.python.org/3.6/whatsnew/3.6.html) document for Python 3.6.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/c2rEbbGLPQc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=c2rEbbGLPQc",
        "original_url": "https://www.youtube.com/watch?v=c2rEbbGLPQc"
    },
    {
        "index": 64,
        "title": "Joseph Leingang   Temporal Data Structures with SQLAlchemy and Postgres   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=2Za9kca3Tu0",
        "video_id": "2Za9kca3Tu0",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1859,
        "view_count": 3540,
        "like_count": 43,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Joseph Leingang\n\nSQLAlchemy ([http://www.sqlalchemy.org](http://www.sqlalchemy.org/)) and Postgres ([https://www.postgresql.org](https://www.postgresql.org/)) provide several useful tools that allow us to build and query records through time: _temporal models_. Combining a need to have robust auditing, as well feature development on per-property history, we can turn “regulatory overhead” into an exciting technical challenge. At Clover Health we have built a small library to automate the task of decorating a model and making it “temporal.” This talk aims to demonstrate the underlying data model and interface for building this system.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/2Za9kca3Tu0/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=2Za9kca3Tu0",
        "original_url": "https://www.youtube.com/watch?v=2Za9kca3Tu0"
    },
    {
        "index": 65,
        "title": "Mario Corchero   It's time for datetime   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=2BRdKf6WYIQ",
        "video_id": "2BRdKf6WYIQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1777,
        "view_count": 2451,
        "like_count": 31,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Mario Corchero\n\nWorking with time is not a trivial challenge. Python includes a native module in the standard library to work with it but datetime keeps being together with unicode a common source of errors. This often leads to the widespread of many other libraries in the attempt of easing the work of working with datetime. Datetime is one of those API that looks easy to use but given the many concepts around time, is it easy to get backfired if the developer has not solid knowledge about the them.\n\nIn this talk we will overview the main concepts about timestamps represented through datetime objects, the limitations on the standard library and some simple steps to try to avoid the common mistakes that everyone can fall into.\n\nNaive datetimes (which the datetime API works by default with) are a great tool to represent calendar times, but when talking about timestamps (focus of this talk) timezones is n essential part of it and the datetime module can be tricky to use for that use cases.\n\nWe will also speak about different standards of time, time zones, Daylight Saving Times, leap seconds, serialization and datetime arithmetics.\n\nThe talk will be focused on giving the foundations that everyone knows to be able to understand and work efficiently and without making painful mistakes when dealing with time related algorithms.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/2BRdKf6WYIQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=2BRdKf6WYIQ",
        "original_url": "https://www.youtube.com/watch?v=2BRdKf6WYIQ"
    },
    {
        "index": 66,
        "title": "Jukka Lehtosalo, David Fisher   Static Types for Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=7ZbwZgrXnwY",
        "video_id": "7ZbwZgrXnwY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2971,
        "view_count": 12074,
        "like_count": 157,
        "comment_count": 17,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Jukka Lehtosalo, David Fisher\n\nOver the past year and a half, Dropbox has been investing in the development of mypy, a static type checker for Python, as a way to make our multimillion-line Python codebase easier to understand, navigate, and maintain.  In this talk, we will discuss the benefits of type annotations, explain how to use them, and give a peak into how mypy works behind the scenes.\n\nMypy is an open-source type-checker for Python which supports the PEP 484 standard for gradual typing. Originally created by Jukka Lehtosalo as part of his PhD thesis in 2013, it is now under active development by a small team at Dropbox which includes David Fisher, Greg Price, and Guido van Rossum.  It supports Python 3.2 and higher, as well as Python 2.7 (via type comments).\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/7ZbwZgrXnwY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=7ZbwZgrXnwY",
        "original_url": "https://www.youtube.com/watch?v=7ZbwZgrXnwY"
    },
    {
        "index": 67,
        "title": "Trey Hunner   Readability Counts   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=knMg6G9_XCg",
        "video_id": "knMg6G9_XCg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1631,
        "view_count": 11556,
        "like_count": 289,
        "comment_count": 20,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Trey Hunner\n\nHave you found unreadable PEP8-compliant code and wondered how to fix it?  Have you ever seen code that was simply a pleasure to read?\n\nIf you've ever wondered what makes code easy to read, this talk is for you.\n\nDuring this talk we'll learn a number of techniques for refactoring code to improve readability and maintainability.\n\nWe'll discuss:\n\n- whitespace\n- self-documenting code\n- modularity\n- expectation management\n\nWe'll end with a checklist for improving the readability of your own code.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/knMg6G9_XCg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=knMg6G9_XCg",
        "original_url": "https://www.youtube.com/watch?v=knMg6G9_XCg"
    },
    {
        "index": 68,
        "title": "Elizaveta Shashkova   Debugging in Python 3 6 Better, Faster, Stronger   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=NdObDUbLjdg",
        "video_id": "NdObDUbLjdg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1696,
        "view_count": 6423,
        "like_count": 103,
        "comment_count": 8,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Elizaveta Shashkova\n\nPython 3.6 was released in December of 2016 and it has a lot of new cool features. Some of them are quite easy for using: a developer can read, for example, about f-strings and they can start using them in their programs as soon as possible. But sometimes features are not so evident, and a new frame evaluation API is one of them.  \nThe new frame evaluation API was introduced to CPython in PEP 523 and it allows to specify a per-interpreter function pointer to handle the evaluation of frames. It might not be evident how to use this new feature in everyday life, but it’s quite easy to understand how to build a fast debugger based on it.  \nIn this talk we are going to explain how standard way of debugging in Python works and how a new frame evaluation API may be useful for creating the fast debugger. Also we will consider why such fast debugging was not possible in the previous versions of Python. If someone hasn’t made a final decision to move to Python 3.6 this talk will provide some new reasons to do it.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/NdObDUbLjdg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=NdObDUbLjdg",
        "original_url": "https://www.youtube.com/watch?v=NdObDUbLjdg"
    },
    {
        "index": 69,
        "title": "Lightning talks May 20th 2017 Morning session",
        "url": "https://www.youtube.com/watch?v=IRKiTV64N4A",
        "video_id": "IRKiTV64N4A",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1744,
        "view_count": 1421,
        "like_count": 12,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "",
        "thumbnail": "https://i.ytimg.com/vi/IRKiTV64N4A/maxresdefault.jpg",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=IRKiTV64N4A",
        "original_url": "https://www.youtube.com/watch?v=IRKiTV64N4A"
    },
    {
        "index": 70,
        "title": "Katy Huff   Keynote   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=kaGS4YXwciQ",
        "video_id": "kaGS4YXwciQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1881,
        "view_count": 2135,
        "like_count": 34,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Katy Huff\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/kaGS4YXwciQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=kaGS4YXwciQ",
        "original_url": "https://www.youtube.com/watch?v=kaGS4YXwciQ"
    },
    {
        "index": 71,
        "title": "Lisa Guo, Hui Ding   Keynote   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=66XoCk79kjM",
        "video_id": "66XoCk79kjM",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2511,
        "view_count": 23584,
        "like_count": 340,
        "comment_count": 11,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Lisa Guo, Hui Ding\n\nKeynote\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/66XoCk79kjM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=66XoCk79kjM",
        "original_url": "https://www.youtube.com/watch?v=66XoCk79kjM"
    },
    {
        "index": 72,
        "title": "Sarah Guido   The Wild West of Data Wrangling   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=xn9sTXR3Cp8",
        "video_id": "xn9sTXR3Cp8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1790,
        "view_count": 4550,
        "like_count": 43,
        "comment_count": 5,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Sarah Guido\n\nData science introductory courses might give you the impression that dealing with data is neat, tidy, and simple. They present you with a simplistic dataset and the scikit-learn or Pandas documentation, and a day or so later, you're done! Piece of cake, right?\n\nThe real world of data isn't that easy! \n\nAs a data scientist who has worked in the industry for several years, I have had a lot of experience dealing with messy, inaccurate, incomplete data, and I want to share those experiences with you. I'll talk my way through three real-world situations where I've had to analyze and build models on untidy and complex data, going through how I've preprocessed the data and prepared it for modeling. You'll leave with an understanding of how a data scientist thinks about data and what she does when the data is complicated.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/xn9sTXR3Cp8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xn9sTXR3Cp8",
        "original_url": "https://www.youtube.com/watch?v=xn9sTXR3Cp8"
    },
    {
        "index": 73,
        "title": "Riley Doyle   Re Programming the Human Genome with Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=9nN3ylYiHSw",
        "video_id": "9nN3ylYiHSw",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1793,
        "view_count": 2037,
        "like_count": 55,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Riley Doyle\n\nModern genome editing techniques such as CRISPR-Cas9 are revolutionizing the way we discover and treat the root genetic causes of disease. Many of the most popular tools and libraries in this cutting edge application are written in Python. This talk will provide a general, software-centric introduction to the exciting new area of genome editing, describe the central string search, machine learning, and data management problems involved, and review how Python frameworks and libraries are used today to solve these problems in Production in order to benefit human health. This talk assumes no prior lab experience: only a proficiency with Python and curiosity!\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/9nN3ylYiHSw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=9nN3ylYiHSw",
        "original_url": "https://www.youtube.com/watch?v=9nN3ylYiHSw"
    },
    {
        "index": 74,
        "title": "Erik Rose   Constructive Code Review   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=iNG1a--SIlk",
        "video_id": "iNG1a--SIlk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2765,
        "view_count": 11439,
        "like_count": 185,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Erik Rose\n\n“Your code is bad and you are bad. Have a bad day.” Too many code reviews feel like this, and it saps the enthusiasm that drives open source. Instead, let’s explore how to give reviews that are truthful but encouraging, boosting the skill level of contributors and the quality of the project. We’ll look at “tact hacks” that nudge communication in a friendly direction, antipatterns to avoid, the pesky human emotions that can tempt us into reviewing poorly, and techniques for leveling up newcomers without losing all your coding time.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/iNG1a--SIlk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=iNG1a--SIlk",
        "original_url": "https://www.youtube.com/watch?v=iNG1a--SIlk"
    },
    {
        "index": 75,
        "title": "Ying Li, David Lawrence   Introduction to Threat Modeling   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=n8l0xTdLnA8",
        "video_id": "n8l0xTdLnA8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2743,
        "view_count": 2296,
        "like_count": 27,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Ying Li, David Lawrence\n\nAre you a website or application developer? Are you worried about security?  Don’t know what you need to know, and what you can safely leave to the experts?  Come learn about how to analyze your application’s design for potential security flaws, how to think like a security engineer, and see some of the most common pitfalls that programs fall victim to.  In this talk we will work through the process of threat modeling - understanding how your system might get attacked, what its weak points are, and how to defend it.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/n8l0xTdLnA8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=n8l0xTdLnA8",
        "original_url": "https://www.youtube.com/watch?v=n8l0xTdLnA8"
    },
    {
        "index": 76,
        "title": "Susan Tan   Rants and Ruminations From A Job Applicant After 100 CS Job Interviews in Silicon Valley",
        "url": "https://www.youtube.com/watch?v=uzz5AaCWMps",
        "video_id": "uzz5AaCWMps",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1861,
        "view_count": 5720,
        "like_count": null,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "Speaker: Susan Tan\n\nWhat is it like to interview at 1 technology company? Stressful and tiring. What is it like to interview at 100 technology companies? I have done that. In late August 2016, I quit an uninspiring full-time software job and talked to 100 employers in the San Francisco Bay Area to find the best fit. The hiring process reflects the company culture and its values. Listen to my rants and ruminations of interviewing at tiny seed-stage startups to large technology companies in Silicon Valley. Learn how to reform your own hiring process to be more considerate and thoughtful. Learn how to prepare for interviews efficiently.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides",
        "thumbnail": "https://i.ytimg.com/vi_webp/uzz5AaCWMps/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=uzz5AaCWMps",
        "original_url": "https://www.youtube.com/watch?v=uzz5AaCWMps"
    },
    {
        "index": 77,
        "title": "Mariatta Wijaya   Dial M For Mentor   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=Wc1krFb5ifQ",
        "video_id": "Wc1krFb5ifQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1772,
        "view_count": 1263,
        "like_count": 14,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Mariatta Wijaya\n\nOne of the nicest things about Python community is the availability of mentors willing to help you. Various mentors have helped me navigate the open source community and help advanced my skills. I realized finding a mentor is not as easy as it seems, and it takes a lot of courage to reach out in the first place. And then, there is impostor syndrome, where one may feel like they don’t deserve the help.\nIn this talk, I will provide advice about working with a mentor.\nAsking for help is not a failure. \n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/Wc1krFb5ifQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Wc1krFb5ifQ",
        "original_url": "https://www.youtube.com/watch?v=Wc1krFb5ifQ"
    },
    {
        "index": 78,
        "title": "Joe Jevnik   Title Available On Request An Introduction to Lazy Evaluation   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=7SH3zWHdGoc",
        "video_id": "7SH3zWHdGoc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1897,
        "view_count": 2612,
        "like_count": 47,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Joe Jevnik\n\nLazy evaluation, also known as \"\"call by need\"\", is an evaluation strategy where\nvalues are produced only when needed. Lazy evaluation is the opposite of eager\nevaluation, Python's normal evaluation model, where functions are executed as\nseen and values are produced immediately.\n\nIn this talk we will define lazy evaluation and contrast it with eager\nevaluation. We will discuss tools that exist in Python for using lazy evaluation\nand show how we can build on the primitives to better represent computations. We\nwill introduce common vocabulary for discussing evaluation models, and compare\ndifferent systems for implementing lazy evaluation. Finally, we will discuss\noptimizations that can be made to optimize lazily evaluated expressions.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/7SH3zWHdGoc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=7SH3zWHdGoc",
        "original_url": "https://www.youtube.com/watch?v=7SH3zWHdGoc"
    },
    {
        "index": 79,
        "title": "Calen Pennington   Immutable Programming   Writing Functional Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=_OLEVvjrIj8",
        "video_id": "_OLEVvjrIj8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1857,
        "view_count": 9229,
        "like_count": 83,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Calen Pennington\n\nThe world of Haskell and functional programming may seem like a distant place to many working Python developers, but some of the techniques used there are remarkably useful when developing in Python.\n\nIn this talk, I will cover some of the pitfalls of mutability that you may run into while writing Python programs, and some tools and techniques that Python has built in that will let you avoid them. You'll see namedtuples, enums and properties, and also some patterns for structuring immutable programs that will make them easier to build, extend, and test.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/_OLEVvjrIj8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=_OLEVvjrIj8",
        "original_url": "https://www.youtube.com/watch?v=_OLEVvjrIj8"
    },
    {
        "index": 80,
        "title": "Matthew Rocklin   Dask A Pythonic Distributed Data Science Framework   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=RA_2qdipVng",
        "video_id": "RA_2qdipVng",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2788,
        "view_count": 29854,
        "like_count": 405,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Matthew Rocklin\n\nDask is a general purpose parallel computing system capable of Celery-like task\nscheduling, Spark-like big data computing, and Numpy/Pandas/Scikit-learn level\ncomplex algorithms, written in Pure Python.  Dask has been adopted by the\nPyData community as a Big Data solution.\n\nThis talk focuses on the distributed task scheduler that powers Dask when\nrunning on a cluster.  We'll focus on how we built a Big Data computing system\nusing the Python networking stack (Tornado/AsyncIO) in service of its data     science stack (NumPy/Pandas/Scikit Learn).  Additionally we'll talk about the  challenges of effective task scheduling in a data science context (data        locality, resilience, load balancing) and how we manage this dynamically with  aggressive measurement and dynamic scheduling heuristics.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/RA_2qdipVng/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=RA_2qdipVng",
        "original_url": "https://www.youtube.com/watch?v=RA_2qdipVng"
    },
    {
        "index": 81,
        "title": "Jason Myers   Leveraging Serverless Architecture for Powerful Data Pipelines   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=JND9F_9_i1A",
        "video_id": "JND9F_9_i1A",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1695,
        "view_count": 1667,
        "like_count": 26,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jason Myers\n\nServerless Architectures that allow us to run python functions in the cloud in an event-driven parallel fashion can be used to create extremely dynamic and powerful data pipelines for use in ETL and data science. Join me for an exploration of how to build data pipelines on Amazon Web Services Lambda with python. We'll cover a single introduction to event-driven programming. Then, we'll walk through building an example pipeline while discussing some of the frameworks and tools that can make building your pipeline easier.  Finally, we'll discuss how to maintain observability on your pipeline to ensure proper performance and troubleshooting information.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/JND9F_9_i1A/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=JND9F_9_i1A",
        "original_url": "https://www.youtube.com/watch?v=JND9F_9_i1A"
    },
    {
        "index": 82,
        "title": "Hynek Schlawack   Solid Snakes or How to Take 5 Weeks of Vacation   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=YVuqeXyvOUc",
        "video_id": "YVuqeXyvOUc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2651,
        "view_count": 4547,
        "like_count": 52,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Hynek Schlawack\n\nNo matter whether you run a web app, search for gravitational waves, or maintain a backup script: being responsible for a piece of software or infrastructure means that you either get a pager right away, or that you get angry calls from people affected by outages.  Being paged at 4am in everyday life is bad enough.  Having to fix problems from hotel rooms while your travel buddies go for brunch is even worse.\n\nAnd while incidents can’t be prevented completely, there are ways to make your systems more reliable and minimize the need for (your!) manual intervention.  This talk will help you to get calm nights and relaxing vacations by teaching you some of them.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/YVuqeXyvOUc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=YVuqeXyvOUc",
        "original_url": "https://www.youtube.com/watch?v=YVuqeXyvOUc"
    },
    {
        "index": 83,
        "title": "Ryan Anguiano   Dr  Microservices, Or How I Learned to Stop Worrying and Love the API   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=OuhCYGLByJg",
        "video_id": "OuhCYGLByJg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1742,
        "view_count": 4347,
        "like_count": 79,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Ryan Anguiano\n\nAssuming that you already know how to build a monolithic app, you must be wondering how you can use all this \"\"microservice\"\" stuff that you keep hearing about. Well, a good word of advice is that you probably don't need it. If designed properly, a monolithic app should be able to scale and fit the needs of most businesses. Even so, you should keep your development as simple as possible until you have proven and solidified your business concepts. But if you do need to grow to Internet scale, then you have a long road ahead of you.\n\nMoving from a monolithic application to microservices is a natural evolution that is often of necessity. There are several competing schools of thought that are still being battle-tested in these early days of microservice architecture. Among all the competing paradigms, most of the requirements can be agreed upon, but are mostly differentiated by the tools used to fulfill the requirements.\n\nThis talk will cover setting up the required infrastructure, and demonstrate how to migrate a sample monolithic Django application into a microservices platform.\n\nThe demo application will use the following technologies: Django, Flask, Fabric, Terraform, Ansible, CentOS, Docker, Mesos, Consul, Nginx, Pgbouncer, Kafka\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/OuhCYGLByJg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=OuhCYGLByJg",
        "original_url": "https://www.youtube.com/watch?v=OuhCYGLByJg"
    },
    {
        "index": 84,
        "title": "Big picture software testing unit testing, Lean Startup, and everything in between   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=Vaq_e7qUA-4",
        "video_id": "Vaq_e7qUA-4",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1471,
        "view_count": 4627,
        "like_count": 64,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Itamar Turner-Trauring\n\nThere are many ways you can test your software: unit testing, manual testing, end-to-end testing, and so forth. Take a step back and you'll discover even more form of testing, many of them very different in their goals: A/B testing, say, where you see which of two versions of your website results in more signups or ad clicks.\n\nHow do these forms of testing differ, how do they relate to each other?\nHow do you choose which kind of testing to pursue, given limited time and resources?\nHow do you deal with strongly held yet opposite views arguing either that a particular kind of testing is essential or that it's a waste time?\n\nThis talk will provide you with a model, a way to organize all forms of testing and understand what exactly they provide, and why. Once you understand the model you will be able to choose the right form of testing for *your* situation and goals.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/Vaq_e7qUA-4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Vaq_e7qUA-4",
        "original_url": "https://www.youtube.com/watch?v=Vaq_e7qUA-4"
    },
    {
        "index": 85,
        "title": "Glyph   In Memory Event Resequencing Realistic Testing For Impossible Bugs   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=0By5yfhkiRs",
        "video_id": "0By5yfhkiRs",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1738,
        "view_count": 830,
        "like_count": 7,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Glyph\n\nAs we all know, we should write testable code, and automated tests.  But as we also know, no test plan survives contact with the real world.  Complex, distributed systems fail in complex, distributed ways, and even the simplest web app today is a complex distributed system.  So, as our code accrues little fixes to bugs that only show up in production, our test suites eventually either become slow integration testing monstrosities that are \"\"realistic\"\" but flaky and unreliable, or useless piles of mocks which are fast and deterministic but don't give you confidence.\n\nIn this talk, we'll explore how to leverage event-driven programming, or \"\"async I/O\"\", to structure code in such a way that its tests are fast, realistic, and reliable, even in the face of horrible race-conditions you only discover in production.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/0By5yfhkiRs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=0By5yfhkiRs",
        "original_url": "https://www.youtube.com/watch?v=0By5yfhkiRs"
    },
    {
        "index": 86,
        "title": "James Saryerwinnie   Next Level Testing   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=jmsk1QZQEvQ",
        "video_id": "jmsk1QZQEvQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1925,
        "view_count": 5437,
        "like_count": 105,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: James Saryerwinnie\n\nUnit, functional, and integration tests are great first steps towards improving the quality of your python project.  Ever wonder if there’s even more you can do?  Maybe you've heard of property-based testing, fuzzing, and mutation testing but you're unsure exactly how they can help you.  In this talk we’ll cover additional types of tests that can help improve the quality and robustness of your python projects: property-based testing, fuzz testing, stress testing, long term reliability testing, and mutation testing.\n\nWe’ll also go beyond just covering what these tests are.  For each of the test types above, I’ll give you real world examples from open source software that I maintain that shows you the types of bugs each test type can find.  I’ll also show you how you can integrate these tests into your Travis CI and/or Jenkins environment.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/jmsk1QZQEvQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=jmsk1QZQEvQ",
        "original_url": "https://www.youtube.com/watch?v=jmsk1QZQEvQ"
    },
    {
        "index": 87,
        "title": "Andrew T  Baker   5 ways to deploy your Python web app in 2017   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=vGphzPLemZE",
        "video_id": "vGphzPLemZE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1677,
        "view_count": 46922,
        "like_count": 1129,
        "comment_count": 27,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Andrew T. Baker\n\nYou’ve built a fine Python web application and now you’re ready to share it with the world. But what’s the best way to deploy your app in 2017?\n\nThis talk will demonstrate popular techniques for deploying Python web applications. We’ll start with a simple Flask application and expose it to the world five times over as we learn to use different tools and services available to the modern Python developer.\n\nSpecific topics covered include:\n\n* Exposing your local dev environment with [ngrok](https://ngrok.com/)\n* Using a Platform-as-a-Service (PaaS) like [Heroku](https://www.heroku.com/)\n* Going “serverless” with [AWS Lambda](https://aws.amazon.com/lambda/)\n* Configuring your own VM with [Google Compute Engine](https://cloud.google.com/compute/)\n* Thinking inside the box using [Docker](https://www.docker.com/)\n\nWe’ll also briefly touch on the pros and cons of each technique to help you figure out which one is right for your app.\n\nAt the end of this talk you will have a basic understanding of how each of these techniques work and you’ll be ready to try them out yourself.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/vGphzPLemZE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=vGphzPLemZE",
        "original_url": "https://www.youtube.com/watch?v=vGphzPLemZE"
    },
    {
        "index": 88,
        "title": "Larry Hastings   The Gilectomy How's It Going   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=pLqv11ScGsQ",
        "video_id": "pLqv11ScGsQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2751,
        "view_count": 22811,
        "like_count": 303,
        "comment_count": 15,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Larry Hastings\n\nOne of the most interesting projects in Python today is Larry Hastings' \"\"Gilectomy\"\" project: the removal of Python's Global Interpreter Lock, or \"\"GIL\"\".  Come for an up-to-the-minute status report: what's been tried, what has and hasn't worked, and what performance is like now.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/pLqv11ScGsQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=pLqv11ScGsQ",
        "original_url": "https://www.youtube.com/watch?v=pLqv11ScGsQ"
    },
    {
        "index": 89,
        "title": "Victor Stinner   Optimizations which made Python 3 6 faster than Python 3 5   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=d65dCD3VH9Q",
        "video_id": "d65dCD3VH9Q",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1745,
        "view_count": 14595,
        "like_count": 99,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Victor Stinner\n\nVarious optimizations made Python 3.6 faster than Python 3.5. Let's see in detail what was done and how.\n\nPython 3.6 is faster than any other Python version on many benchmarks. We will see results of the Python benchmark suite on Python 2.7, 3.5 and 3.6.\n\nThe bytecode format and instructions to call functions were redesign to run bytecode faster.\n\nA new C calling convention, called \"\"fast call\"\", was introduced to avoid temporary tuple and dict. The way Python parses arguments was also optimized using a new internal cache.\n\nOperations on bytes and encodes like UTF-8 were optimized a lot thanks to a new API to create bytes objects. The API allows very efficient optimizations and reduces memory reallocations.\n\nSome parts of asyncio were rewritten in C to speedup code up to 25%. The PyMem_Malloc() function now also uses the fast pymalloc allocator also giving tiny speedup for free.\n\nFinally, we will see optimization projects for Python 3.7: use fast calls in more cases, speed up method calls, a cache on opcodes, a cache on global variables.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/d65dCD3VH9Q/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=d65dCD3VH9Q",
        "original_url": "https://www.youtube.com/watch?v=d65dCD3VH9Q"
    },
    {
        "index": 90,
        "title": "Lennart Regebro   Prehistoric Patterns in Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=V5-JH23Vk0I",
        "video_id": "V5-JH23Vk0I",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1758,
        "view_count": 11113,
        "like_count": 205,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Lennart Regebro\n\nWhy do some code use dictionaries that have None for all values? Is it true that you shouldn't concatenate strings with +? Will Python optimize constant calculations?\n\nThis talk will go through some patterns that used to be common in Python, but which now are regarded as outdated and see if they really are outdated and why. The results surprised me, maybe they'll surprise you.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/V5-JH23Vk0I/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=V5-JH23Vk0I",
        "original_url": "https://www.youtube.com/watch?v=V5-JH23Vk0I"
    },
    {
        "index": 91,
        "title": "Steve Dower   I Installed Python 3 6 on Windows and I Liked It   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=w6GTdHFkMwY",
        "video_id": "w6GTdHFkMwY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2065,
        "view_count": 2950,
        "like_count": 39,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Steve Dower\n\nPython has a great reputation as a cross-platform language, which for many people means different varieties of Linux. But a huge number of Python users are running on Windows - a fundamentally different operating system where things do not always work the same. However, Python has always worked incredibly well across different platforms including Windows, going to great lengths to support and expose the platform without making development more complex. In this session, CPython core developer and Microsoft engineer Steve Dower will discuss some of the reasons why cross-platform support is not an accident, and how Python 3.6 makes it even easier to support both Windows and Linux.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/w6GTdHFkMwY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=w6GTdHFkMwY",
        "original_url": "https://www.youtube.com/watch?v=w6GTdHFkMwY"
    },
    {
        "index": 92,
        "title": "Katie McLaughlin   Snek in the Browser   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=1YmbZQjty3Y",
        "video_id": "1YmbZQjty3Y",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1860,
        "view_count": 1301,
        "like_count": 16,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Katie McLaughlin\n\nPython is a decades-strong language with a large community, and it has a solid foundation on the server, but it doesn't have a good user story in the browser... until now.\n\nThe BeeWare project aims to bring Python natively, everywhere. Using a combination of the Batavia and Toga projects, we can develop and entirely native web experience in Python, no JavaScript required.\n\nDuring this talk, you will learn about how the BeeWare project has built Batavia, a Python virtual machine in JavaScript; and Toga, a multi-platform native API wrapper; a combination of which can be used to build an entire web platform in Python only.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/1YmbZQjty3Y/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=1YmbZQjty3Y",
        "original_url": "https://www.youtube.com/watch?v=1YmbZQjty3Y"
    },
    {
        "index": 93,
        "title": "Packaging Let’s Encrypt Lessons learned shipping Python code to hundreds of thousands of users",
        "url": "https://www.youtube.com/watch?v=WdhYa--Cahk",
        "video_id": "WdhYa--Cahk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1745,
        "view_count": 1462,
        "like_count": 23,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Noah Swartz\n\nLet's Encrypt launhced on April 12th 2016, for the first time allowing anyone access to free SSL certificates that could be automatically fetched and renewed. The demand was massive, and so was the need for a client to fetch these certificates for all of those users. This client is called Certbot, and it's written entirely in Python.\nUnfortunately for the sanity of Certbot developers, these users of Let's Encrypt can't decide on a single operating system to use! This requires us to ship our software, and all of its dependencies, to a variety of systems all with different web servers, Python versions, package managers,and underlying packages. Learn how we got through this mess!\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/WdhYa--Cahk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=WdhYa--Cahk",
        "original_url": "https://www.youtube.com/watch?v=WdhYa--Cahk"
    },
    {
        "index": 94,
        "title": "Building A Gigaword Corpus Lessons on Data Ingestion, Management, and Processing for NLP",
        "url": "https://www.youtube.com/watch?v=j1DdGX2d9BE",
        "video_id": "j1DdGX2d9BE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1877,
        "view_count": 2121,
        "like_count": 29,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Rebecca Bilbro\n\nAs the applications we build are increasingly driven by text, doing data ingestion, management, loading, and preprocessing in a robust, organized, parallel, and memory-safe way can get tricky. This talk walks through the highs (a custom billion-word corpus!), the lows (segfaults, 400 errors, pesky mp3s), and the new Python libraries we built to ingest and preprocess text for machine learning.\n\nWhile applications like Siri, Cortana, and Alexa may still seem like novelties, language-aware applications are rapidly becoming the new norm. Under the hood, these applications take in text data as input, parse it into composite parts, compute upon those composites, and then recombine them to deliver a meaningful and tailored end result. The best applications use language models trained on _domain-specific corpora_ (collections of related documents containing natural language) that reduce ambiguity and prediction space to make results more intelligible. Here's the catch: these corpora are huge, generally consisting of at least hundreds of gigabytes of data inside of thousands of documents, and often more!\n\nIn this talk, we'll see how working with text data is substantially different from working with numeric data, and show that ingesting a raw text corpus in a form that will support the construction of a data product is no trivial task. For instance, when dealing with a text corpus, you have to consider not only how the data comes in (e.g. respecting rate limits, terms of use, etc.), but also where to store the data and how to keep it organized. Because the data comes from the web, it's often unpredictable, containing not only text but audio files, ads, videos, and other kinds of web detritus. Since the datasets are large, you need to anticipate potential performance problems and ensure memory safety through streaming data loading and multiprocessing. Finally, in anticipation of the machine learning components, you have to establish a standardized method of transforming your raw ingested text into a corpus that's ready for computation and modeling.\n\nIn this talk, we'll explore many of the challenges we experienced along the way and introduce two Python packages that make this work a bit easier: [Baleen](https://pypi.python.org/pypi/baleen/0.3.3) and [Minke](https://github.com/bbengfort/minke). Baleen is a package for ingesting formal natural language data from the discourse of professional and amateur writers, like bloggers and news outlets, in a categorized fashion. Minke extends Baleen with a library that performs parallel data loading, preprocessing, normalization, and keyphrase extraction to support machine learning on a large-scale custom corpus.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/j1DdGX2d9BE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=j1DdGX2d9BE",
        "original_url": "https://www.youtube.com/watch?v=j1DdGX2d9BE"
    },
    {
        "index": 95,
        "title": "Padmaja V Bhagwat   Algorithmic Music Generation   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=Kk33YgJuDfk",
        "video_id": "Kk33YgJuDfk",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1292,
        "view_count": 2616,
        "like_count": 75,
        "comment_count": 6,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Padmaja V Bhagwat\n\nMusic is mainly an artistic act of inspired creation and is unlike some of the traditional math problems.  Music cannot be solved by a simple set of formulae. The most interesting and challenging part is producing unique music without infringing the copyright. The generated music has to sound good, and what sounds good is very subjective and varies from culture to culture.\n\nArtificial Neural Network/Deep Learning has a wide range of applications, such as in Image processing, Natural language processing, Time series prediction, etc. But what about its usage in art? Could we use deep learning to create music? \n\nThis talk is about how deep learning models were used to produce music - catering particularly to Bollywood.\n\nThis talk would show how an exquisite piece of art i.e. music can be generated using deep learning model which helps in automated feature extraction. In order to automate the music generation, the model must be able to remember the learned features over the longer period of time, this is achieved by a special type of Recurrent Neural Network (RNN) called as LSTM (Long Short Term Memory) network. \n\nImplementation of such complex model can be made much easier using inbuilt Python libraries such as Keras with Theano as backend. It allows for easy and fast prototyping. Packages like numpy and scipy are being used for easier mathematical computation of input vectors and for reading/writing the WAV files respectively. The neural network architecture makes use of numerous amount of music samples to train the model. After an adequate number of iterations and training time, this model generates music that is unique and original. \n\nIn this talk, steps involved in preprocessing of data, training the model, testing the model and generating the music from the trained model will be discussed. This talk will also cover some of the challenges and tradeoffs made for algorithmic music generation. \n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/Kk33YgJuDfk/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Kk33YgJuDfk",
        "original_url": "https://www.youtube.com/watch?v=Kk33YgJuDfk"
    },
    {
        "index": 96,
        "title": "Factory Automation with Python   Stories about Robots, Serial Ports, and Barcode Readers",
        "url": "https://www.youtube.com/watch?v=cEyVfiix1Lw",
        "video_id": "cEyVfiix1Lw",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1804,
        "view_count": 28699,
        "like_count": 660,
        "comment_count": 13,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jonas Neubert\n\nIn industrial automation _tried and tested_ always beats _latest and greatest_: The machines that make smartphones have a serial port and are configured with `.csv` files. But when your factory automates complex non-linear workflows and is jam-packed with sensors and robots, you are quickly faced with software engineering challenges that call for modern tools.\n\nPython turns out to be surprisingly versatile in this setting, whether for prototyping a single conveyor belt or taming a building full of robots. This talk explains how to use Python for interfacing with two common industrial automation devices: a barcode scanner and a Programmable Logic Controller (PLC). After a simple demo, you’ll hear about lessons learned using Python packages that weren’t written with robots in mind, like Celery and pandas, with robots.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/cEyVfiix1Lw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=cEyVfiix1Lw",
        "original_url": "https://www.youtube.com/watch?v=cEyVfiix1Lw"
    },
    {
        "index": 97,
        "title": "Jessica Lundin   Snakes on a Hyperplane Python Machine Learning in Production   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=oV-cm0Loefg",
        "video_id": "oV-cm0Loefg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1526,
        "view_count": 1222,
        "like_count": 12,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jessica Lundin\n\nCompanies with an artificial-intelligence plan have a differentiating strategy in the intelligence economy; however, implementing robust machine-learning in production is nontrivial, often requiring a close collaboration between data scientists and developers, and retooling the production stack and workflows to develop and maintain accurate models.  \n\nMachine learning in production involves model application, handling missing data, data artifacts, and data outside of the training calibration.  A rigorous evaluation framework draws upon logging to determine characteristics of model coverage, model performance, auditing, and run-time performance.  Model coverage includes the number of times the model produced sensible output relative to number of times it is called.  Model coverage is reduced if the model does not converge or model criteria are not met.  Model performance is evaluated with a suite of metrics (accuracy, AUC, FPR, TPR, RMSE, MAPE, etc.), which assist in determining the most appropriate model to use in the production scenario and the validity of the model training.  Regularly performing manual audits for spot checks is important for debugging and ensuring the model passes sanity checks.  Model performance includes run times and profiling model pieces, ensuring performance is within specified requirements and refactoring otherwise.\n\nIn the AI renaissance, where ML is a critical piece of intelligent products, seamlessly integrating model evaluation into workflows is an important component of making robust products and building a satisfying customer experience.  Python is a great language to build intelligent products with its abundance of ML libraries and wrappers contributed as open-source software in addition to rich full-stack capabilities.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/oV-cm0Loefg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=oV-cm0Loefg",
        "original_url": "https://www.youtube.com/watch?v=oV-cm0Loefg"
    },
    {
        "index": 98,
        "title": "Michelle Fullwood   A gentle introduction to deep learning with TensorFlow   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=5e0TbyCkbCY",
        "video_id": "5e0TbyCkbCY",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2475,
        "view_count": 11413,
        "like_count": 177,
        "comment_count": 11,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Michelle Fullwood\n\nDeep learning's explosion of spectacular results over the past few years may make it appear esoteric and daunting, but in reality, if you are familiar with traditional machine learning, you're more than ready to start exploring deep learning. This talk aims to gently bridge the divide by demonstrating how deep learning operates on core machine learning concepts and getting attendees started coding deep neural networks using Google's TensorFlow library.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/5e0TbyCkbCY/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=5e0TbyCkbCY",
        "original_url": "https://www.youtube.com/watch?v=5e0TbyCkbCY"
    },
    {
        "index": 99,
        "title": "Jon Banafato   What's in your pip toolbox   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=HOZxSmsbk4M",
        "video_id": "HOZxSmsbk4M",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1187,
        "view_count": 2114,
        "like_count": 46,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jon Banafato\n\n`pip` is a great tool, but dependency management doesn't stop there. I'll explore several tools that work with `pip` to make managing your dependencies easier, faster, and safer. I'll cover generating dependencies a better way, maintaining your `requirements.txt` for the long-term, and exploring existing Python environments. Afterward, you'll never want to `pip freeze  requirements.txt` again.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/HOZxSmsbk4M/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=HOZxSmsbk4M",
        "original_url": "https://www.youtube.com/watch?v=HOZxSmsbk4M"
    },
    {
        "index": 100,
        "title": "Amber Brown   Implementing Concurrency and Parallelism From The Ground Up   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=31fXwpb0P9c",
        "video_id": "31fXwpb0P9c",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1959,
        "view_count": 4571,
        "like_count": 45,
        "comment_count": 5,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Amber Brown\n\nWhen writing an application, it is common to want to do many things at once. For web servers, this is serve multiple web requests, for GUI applications it's doing a background task whilst keeping the UI responsive. But how do we actually do that? This talk will go into how concurrency and parallelism work from the CPU, OS, and threads up, how state (data) is shared between them, and how this interacts with the functions that you, the programmer, write, and how you can write properly behaving concurrent or parallel software.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/31fXwpb0P9c/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=31fXwpb0P9c",
        "original_url": "https://www.youtube.com/watch?v=31fXwpb0P9c"
    },
    {
        "index": 101,
        "title": "Jessica Stringham   Experiment Assignment on the Web   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=B5DqPOfQxGo",
        "video_id": "B5DqPOfQxGo",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1735,
        "view_count": 639,
        "like_count": 9,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jessica Stringham\n\nA popular way of improving websites is to run experiments on it. We split users into groups, show two or more variations of the site, measure how well each one does, and then show the best version to everyone. In this talk, I'll walk through a toy Python program that does the first step: splits users into groups.\nA few interesting problems arise: grouping users, whitelists, and scaling. I'll share different ways to address them. I'll also give examples of things that can go terribly wrong when designing experiment assignment code.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/B5DqPOfQxGo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=B5DqPOfQxGo",
        "original_url": "https://www.youtube.com/watch?v=B5DqPOfQxGo"
    },
    {
        "index": 102,
        "title": "Brendan McCollam   Web identity OAuth2 and OpenIDConnect   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=xHFzhBjnMPI",
        "video_id": "xHFzhBjnMPI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1639,
        "view_count": 3286,
        "like_count": 65,
        "comment_count": 4,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Brendan McCollam\n\nInterested in adding single sign-on to your application, but confused about the variety of different web authentication methods out there? OAuth, OAuth2, OpenID, OpenIDConnect, SAML, Facebook Connect? This talk will clarify the different protocols, examining OAuth2 and OpenIDConnect in greater detail. It will demonstrate a basic client implementation using FLOSS libraries, and briefly touch on some of the issues involved in server implementation.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/xHFzhBjnMPI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xHFzhBjnMPI",
        "original_url": "https://www.youtube.com/watch?v=xHFzhBjnMPI"
    },
    {
        "index": 103,
        "title": "Asheesh Laroia, Philip James   Type uWSGI; press enter; what happens   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=8sFkbndLVPg",
        "video_id": "8sFkbndLVPg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1878,
        "view_count": 1847,
        "like_count": 30,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Asheesh Laroia, Philip James\n\nYou're a pretty knowledgeable Python web application developer, but how does that web application get served to the world? For many of us, uWSGI is the magic that makes our application available, and in this talk we'll look at how uWSGI works with the OS and the networking stack to make the magic happen.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/8sFkbndLVPg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=8sFkbndLVPg",
        "original_url": "https://www.youtube.com/watch?v=8sFkbndLVPg"
    },
    {
        "index": 104,
        "title": "Nicole Zuckerman   The Glory of pdb's set trace   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=2FftatTS3jc",
        "video_id": "2FftatTS3jc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1909,
        "view_count": 2246,
        "like_count": 24,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Nicole Zuckerman\n\nEveryone needs to debug code, and it can take up a non-trivial portion of our time to wait for code to complete execution and write print messages to stdout. There’s one function in particular in the python debugger (pdb) library that can give you a much clearer understanding of what’s going on in your code, much more quickly; pdb.set_ trace().  In this talk, we’ll identify the most useful things you can do when you use set trace, that can make debugging exponentially more efficient and enjoyable.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/2FftatTS3jc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=2FftatTS3jc",
        "original_url": "https://www.youtube.com/watch?v=2FftatTS3jc"
    },
    {
        "index": 105,
        "title": "Katherine Scott   Python from Space Analyzing Open Satellite Imagery Using the Python Ecosystem",
        "url": "https://www.youtube.com/watch?v=rUUgLsspTZA",
        "video_id": "rUUgLsspTZA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2716,
        "view_count": 13931,
        "like_count": 320,
        "comment_count": 9,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Katherine Scott\n\nEarth imaging satellites, just like our computers, are shrinking and becoming more ubiquitous than ever before. It is now possible to obtain open satellite data on a daily if not weekly basis and for this data to be put to work; helping us better understand our planet and quickly respond to disaster situations. \n\nIn this talk we will work through a jupyter notebook that covers the satellite data ecosystem and the python tools that can be used to sift through and analyze that data. Topics include python tools for using Open Street Maps data, the Geospatial Data Abstraction Library (GDAL), and OpenCV and NumPy for image processing. This talk is intended for novice and intermediate python developers who are interested in using data science and satellite imagery for social good and fundamental scientific research. \n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/rUUgLsspTZA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=rUUgLsspTZA",
        "original_url": "https://www.youtube.com/watch?v=rUUgLsspTZA"
    },
    {
        "index": 106,
        "title": "David DB Baumgold   Looping Like a Pro in Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=u8g9scXeAcI",
        "video_id": "u8g9scXeAcI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1553,
        "view_count": 26438,
        "like_count": 504,
        "comment_count": 25,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: David \"\"DB\"\" Baumgold\n\nThe humble loop: it's hard to write a program without it. Whether it's processing numbers in a sequence, lines in a text file, users in a database, or any other list of things, you use loops all the time. But did you know that Python has a lot of different ways to write loops? Reaching for the right looping tool can make your code cleaner, more readable, easier to test, and it can even make it run faster! By the end of this talk, you'll be looping like a pro, and your code will be better for it.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/u8g9scXeAcI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=u8g9scXeAcI",
        "original_url": "https://www.youtube.com/watch?v=u8g9scXeAcI"
    },
    {
        "index": 107,
        "title": "Michele Pratusevich   Instagram Filters in 15 Lines of Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=otLGDpBglEA",
        "video_id": "otLGDpBglEA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1636,
        "view_count": 3095,
        "like_count": 67,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Michele Pratusevich\n\nImages tell stories, and we love Instagram filters because they give emotion to our images. Do you want to explore what makes up Instagram filters? In this talk, we will talk about the basic elements of Instagram filters and implement them in Python. The staple libraries we will use are scikit-image and numpy - matplotlib and jupyter notebooks for plotting and interactivity. In the end, we will implement the (now-defunct) Gotham Instagram filter in 15 lines of Python (not including imports). Throughout the process, there will be many pretty pictures.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/otLGDpBglEA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=otLGDpBglEA",
        "original_url": "https://www.youtube.com/watch?v=otLGDpBglEA"
    },
    {
        "index": 108,
        "title": "A  Jesse Jiryu Davis   Grok the GIL Write Fast And Thread Safe Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=7SSYhuk5hmc",
        "video_id": "7SSYhuk5hmc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 2490,
        "view_count": 8658,
        "like_count": 260,
        "comment_count": 14,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: A. Jesse Jiryu Davis\n\nI wrote Python for years while holding mistaken notions about the Global Interpreter Lock, and I've met others in the same boat. The GIL's effect is simply this: only one thread can execute Python code at a time, while N other threads sleep or await network I/O. Let's read CPython interpreter source and try some examples to grok the GIL, and learn to write fast and thread-safe Python.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/7SSYhuk5hmc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=7SSYhuk5hmc",
        "original_url": "https://www.youtube.com/watch?v=7SSYhuk5hmc"
    },
    {
        "index": 109,
        "title": "Cory Benfield   Requests Under The Hood   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=ptbCIvve6-k",
        "video_id": "ptbCIvve6-k",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1897,
        "view_count": 6196,
        "like_count": 132,
        "comment_count": 6,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Cory Benfield\n\nRequests is widely acknowledged as a library that saves users an enormous amount of time, effort, and pain through its intuitive and clear API. For this reason, most people who have never looked at the code assume that its code is as intuitive, well-structured, and clear as the API.\n\nOf course, the truth is more complex than that. Real software that deals with real problems is rarely ideal: there are edge cases, terrible hacks, and awkward workarounds for problems.\n\nOften in the software industry we pretend that these imperfections in our software don’t exist, or we try to hide them. These imperfections frequently cause people to reinvent wheels in order to simplify the code, which has benefits for understandability but frequently has downsides for resilience. When people talk about “battle-tested” code, they mean code that has been dirtied up over time from its original Platonic ideal implementation to something that is just as complex and warty as real life.\n\nIn this talk, one of the Requests and urllib3 core maintainers lays bare all of the worst and hackiest corners of the codebases of these two libraries. The goal is to help expose all of the invisible work done in mature codebases to tolerate edge cases and misbehaviour, as well as to try to remind us all that the perfect is the enemy of the good.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ptbCIvve6-k/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ptbCIvve6-k",
        "original_url": "https://www.youtube.com/watch?v=ptbCIvve6-k"
    },
    {
        "index": 110,
        "title": "Amandine Lee   Passing Exceptions 101 Paradigms in Error Handling   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=BMtJbrvwlmo",
        "video_id": "BMtJbrvwlmo",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 1876,
        "view_count": 5779,
        "like_count": 72,
        "comment_count": 7,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Amandine Lee\n\nException handling in Python can sometimes feel like a Wild West. If you have a `send_email` function, and the caller inputs an invalid email address, should it:\nA) Return `None` or some other special return value,\nB) Let the underlying exception it might cause bubble up,\nC) Check via a regex and type checking and raise a `ValueError` immediately, or\nD) Make a custom `EmailException` subclass and raise that? \n\nWhat if there is a network error while the email was sending? Or what if the function calls a helper `_format_email` that returns an integer (clearly wrong!), or raises an `TypeError` itself? Should it crash the program or prompt a retry? \n\nThis talk will introduce the concept of an exception, explain the built-in Python exception hierarchy and the utility of custom subclasses, demonstrate try/except/finally/else syntax, and then explore different design patterns for exception control flow and their tradeoffs using examples. It will also make comparisons to error handling philosophy in other languages, like Eiffel and Go.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/BMtJbrvwlmo/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=BMtJbrvwlmo",
        "original_url": "https://www.youtube.com/watch?v=BMtJbrvwlmo"
    },
    {
        "index": 111,
        "title": "Stuart Williams   Python Epiphanies   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=oQca6eDcjA8",
        "video_id": "oQca6eDcjA8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 11841,
        "view_count": 5873,
        "like_count": 57,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Stuart Williams\n\nThis tutorial is for developers who've been using Python for a while and would consider themselves at an intermediate level, but are looking for a deeper understanding of the language.  It focuses on how Python differs from other languages in subtle but important ways that are often confusing, and it demystifies a number of language features that are sometimes misunderstood.\n\nIn many ways Python is very similar to other programming languages.  However, in a few subtle ways it is quite different, and many software developers new to Python, after their initial successes, hit a plateau and have difficulty getting past it.  Others don't hit or perceive a plateau, but still find some of Python's features a little mysterious or confusing.  This tutorial will help deconstruct some common incorrect assumptions about Python.\n\nIf in your use of Python you sometimes feel like an outsider, like you're missing the inside jokes, like you have most of the puzzle pieces but they don't quite fit together yet, or like there are parts of Python you just don't get, this may be a good tutorial for you.\n\nAfter completing this tutorial you'll have a deeper understanding of many Python features.  Here are some of the topics we'll cover:\n\n- How objects are created and names are assigned to them\n\n- Ways to modify a namespace: assignment, import, function definition and call, and class definition and instantiation.  Much of the tutorial is structured around namespaces and how they get modified to help you understand most of the differences between variables in other languages and those in Python, including\n\n    - why Python has neither pass-by-value nor pass-by-reference function call semantics,\n\n    - and why parameters passed to a function can sometimes be changed by it and sometimes cannot.\n\n- Iterables, iterators, and the iterator protocol, including how to make class instances iterable\n\n- How to use generators to make your code easier to read and understand\n\n- Hacking classes after their definition, and creating classes without a class statement, as an exercise to better understand how they work\n\n- Bound versus unbound methods, how they're implemented, and interesting things you can do with bound methods\n\n- How and why you might want to create or use a partial function\n\n- Example use-cases of functions as first-class objects\n\n- Unpacking and packing arguments with * and ** on function call and definition\n\nBring a laptop with Python 3 and Jupyter Notebook.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/oQca6eDcjA8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=oQca6eDcjA8",
        "original_url": "https://www.youtube.com/watch?v=oQca6eDcjA8"
    },
    {
        "index": 112,
        "title": "Torsten Scholak, Diego Maniloff   Intro to Bayesian Machine Learning with PyMC3 and Edward",
        "url": "https://www.youtube.com/watch?v=fR5Wvb86-IU",
        "video_id": "fR5Wvb86-IU",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170520",
        "duration": 11922,
        "view_count": 12380,
        "like_count": 157,
        "comment_count": 9,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Torsten Scholak, Diego Maniloff\n\nThere has been uprising of probabilistic programming and Bayesian statistics. These techniques are tremendously useful, because they help us to understand, to explain, and to predict data through building a model that accounts for the data and is capable of synthesizing it. This is called the generative approach to statistical pattern recognition.\n\nEstimating the parameters of Bayesian models has always been hard, impossibly hard actually in many cases for anyone but experts. However, recent advances in probabilistic programming have endowed us with tools to estimate models with a lot of parameters and for a lot of data. In this tutorial, we will discuss two of these tools, PyMC3 and Edward. These are black box tools, swiss army knifes for Bayesian modeling that do not require knowledge in calculus or numerical integration. This puts the power of Bayesian statistics into the hands of everyone, not only experts of the field. And, it's great that these are implemented in Python with its rich, beginner-friendly ecosystem. It means we can immediately start playing with it...\n\nWe have planned three awesome parts, spread over three awesome hours:\n\n* First hour: Introduction to Bayesian machine learning.\n\n* Second hour: Baby steps in PyMC3 and Edward.\n\n* Third hour: Solve a real-world problem with PyMC3 or Edward (model, fit, criticize).\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/fR5Wvb86-IU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=fR5Wvb86-IU",
        "original_url": "https://www.youtube.com/watch?v=fR5Wvb86-IU"
    },
    {
        "index": 113,
        "title": "IPython and Jupyter in Depth: High productivity, interactive Python - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=VQBZ2MqWBZI",
        "video_id": "VQBZ2MqWBZI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11946,
        "view_count": 22473,
        "like_count": 225,
        "comment_count": 8,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Matthias Bussonnier, Mike Bright, Min Ragan-Kelley\n\n# Description\n\nIPython and Jupyter provide tools for interactive computing that are widely\nused in scientific computing, education, and data science, but can benefit any\nPython developer.\n\nYou will learn how to use IPython in different ways, as:\n\n- an interactive shell,\n- a graphical console,\n- a network-aware VM (Virtual machine) in GUIs,\n- a web-based notebook combining code, graphics and rich HTML.\n\nWe will demonstrate how to deploy a custom environment\nwith Docker that not only contains multiple Python kernels but also a couple\nof other languages.\n\n# Objectives\n\nAt the end of this tutorial, attendees will have an understanding of the\noverall design of Jupyter (and IPython) as a suite of applications they can use\nand combine in multiple ways in the course of their development work with\nPython and other programming languages. They will learn:\n\n* Tricks from the IPython machinery that are useful in everyday development,\n\n* What high-level applications in Jupyter, the web-based notebooks, can do and\n  how these applications can be used.\n\n* How to use IPython and Jupyter together so that they can be best used for the\n  problem at hand.\n\n# Python Level\n\nIntermediate\n\n# Domain Level\n\nIntroductory\n\n# Detailed Abstract\n\nIPython started in 2001 simply as a better interactive Python shell. Over the\nlast decade it has grown into a powerful set of interlocking tools that\nmaximize developer productivity in Python while working interactively.\n\nToday, Jupyter consists of an IPython kernel that executes user code, provides\nmany features for introspection and namespace manipulation, and tools to\ncontrol this kernel either in-process or out-of-process thanks to a well\nspecified communications protocol implemented over ZeroMQ. This architecture\nallows the core features to be accessed via a variety of clients, each\nproviding unique functionality tuned to a specific use case:\n\n* An interactive, terminal-based shell with capabilities beyond the default\n  Python interactive interpreter (this is the classic application opened by the\n  `ipython` command that many users have worked with)\n\n* A [web-based notebook](http://jupyter.org/) that can execute\n  code and also contain rich text and figures, mathematical equations and\n  arbitrary HTML. This notebook presents a document-like view with cells where\n  code is executed but that can be edited in-place, reordered, mixed with\n  explanatory text and figures, etc. The notebook provides an interactive\n  experience that combines live code and results with literate documentation\n  and the rich media that modern browsers can display:\n\n    ![Notebook screenshot](http://jupyter.org/assets/jupyterpreview.png)\n\n  The notebooks also allow for code in multiple languages allowing to mix Python\n  with Cython, C, R and other programming languages to access features hard to obain from\n  Python.\n\nThese tools also increasingly work with languages other than Python, and we\nrenamed the language independent frontend components to *Jupyter* in order to\nmake this clearer. The Python kernel we provide and the original terminal-based\nshell will continue to be called *IPython*.\n\nIn this hands-on, in-depth tutorial, we will briefly describe IPython's\narchitecture and will then show how to use the above tools for a highly\nproductive workflow in Python.\n\nThe materials for this tutorial are\n[available on a github repository](https://github.com/ipython/ipython-in-depth).\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/VQBZ2MqWBZI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=VQBZ2MqWBZI",
        "original_url": "https://www.youtube.com/watch?v=VQBZ2MqWBZI"
    },
    {
        "index": 114,
        "title": "Sev Leonard   IoT Lab with Micropython and Friends   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=9BUakSTQwb4",
        "video_id": "9BUakSTQwb4",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11546,
        "view_count": 1246,
        "like_count": 9,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Sev Leonard\n\nCome learn about the Internet of Things and Micropython in this hands-on hardware tutorial, no soldering or hardware experience required! We will be building a wifi-enabled temperature sensor as a vehicle for learning IoT concepts including data capture, building security into data transmission, and messaging between IoT clients and servers. Attendees will have an opportunity to take their sensors out into the conference venue to take measurements, reconvening to discuss analysis and visualization of IoT data.  All the hardware needed will be provided, and attendees will be able to program the devices via a locally-hosted web interface.  \n\nThis tutorial will be a great introduction for folks interested in Internet of Things, Micropython, or hardware hacking. You do not need prior experience in any of these topics to attend. We will be using the ESP8266 micro controller and the MQTT protocol for messaging. Attendees should download the [mosquitto MQTT broker](https://mosquitto.org/download/) in addition to collateral that will be sent out to attendees ahead of the tutorial. We will be using the [WebREPL interface](https://docs.micropython.org/en/latest/esp8266/esp8266/tutorial/repl.html) for programming the ESP8266.  If you are wondering what the heck all of this means do not despair! These topics will be covered in the tutorial.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/9BUakSTQwb4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=9BUakSTQwb4",
        "original_url": "https://www.youtube.com/watch?v=9BUakSTQwb4"
    },
    {
        "index": 115,
        "title": "Allen Downey - Introduction to Digital Signal Processing - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=UOIllEyajGs",
        "video_id": "UOIllEyajGs",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 9905,
        "view_count": 28429,
        "like_count": 331,
        "comment_count": 11,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Allen Downey\n\nSpectral analysis is an important and useful technique in many areas of science and engineering, and the Fast Fourier Transform is one of the most important algorithms, but the fundamental ideas of signal processing are not as widely known as they should be.\n\nFortunately, Python provides an accessible and enjoyable way to get started.  In this tutorial, I present material from my book, *Think DSP*, and from a class I teach at Olin College.  We will work with audio signals, including music and other recorded sounds, and visualize their spectrums and spectrograms.  We will synthesize simple sounds and learn about harmonic structure, chirps, filtering, and convolution.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/UOIllEyajGs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=UOIllEyajGs",
        "original_url": "https://www.youtube.com/watch?v=UOIllEyajGs"
    },
    {
        "index": 116,
        "title": "Deploy and scale containers with Docker native, open source orchestration   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=EuzoEaE6Cqs",
        "video_id": "EuzoEaE6Cqs",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 13156,
        "view_count": 3275,
        "like_count": 43,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Jerome Petazzoni, AJ Bowen\n\nDeploy your own cluster! Use it to \"\"build, ship, and run\"\" containerized applications! Learn how to implement logging, metrics, stateful services, and more! Learn the True Way of DevOps! Alright, we can't promise anything about the True Way of DevOps, but everything else will definitely be in this tutorial.\n\nWe will run a demo app featuring Python components and see some best practices to \"\"Dockerize\"\" Python code and Flask in particular; but the tutorial also includes other languages and frameworks.\n\nCome with your laptop! You don't need to install anything before the workshop, as long as you have a web browser and a SSH client. Each student will have their own private cluster during the tutorial, to get immediately applicable first-hand experience.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/EuzoEaE6Cqs/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=EuzoEaE6Cqs",
        "original_url": "https://www.youtube.com/watch?v=EuzoEaE6Cqs"
    },
    {
        "index": 117,
        "title": "Ben Zaitlen, Matthew Rocklin, Min Ragan Kelley, Olivier Grisel   Parallel Data Analysis   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=KIXACCJHtDg",
        "video_id": "KIXACCJHtDg",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11594,
        "view_count": 2870,
        "like_count": 20,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Ben Zaitlen, Matthew Rocklin, Min Ragan-Kelley, Olivier Grisel\n\nAn overview of parallel computing techniques available from Python and hands-on experience with a variety of frameworks.\n\nThis course has two primary goals:\n  1. Teach students how to reason about parallel computing\n  2. Provide hands-on experience with a variety of different parallel computing frameworks\n\nStudents will walk away with both a high-level understanding of parallel problems and how to select and use an appropriate parallel computing framework for their problem.  They will get hands-on experience using tools both on their personal laptop, and on a cluster environment that will be provided for them at the tutorial.\n\nFor the first half we cover programming patterns for parallelism found across many tools, notably map, futures, and big-data collections. We investigate these common APIs by diving into a sequence of examples that require increasingly complex tools.  We learn the benefits and costs of each API and the sorts of problems where each is appropriate.\n\nFor the second half, we focus on the performance aspects of frameworks and give intuition on how to pick the right tool for the job. This includes common challenges in parallel analysis, such as communication costs, debugging parallel code, as well as deployment and setup strategies.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/KIXACCJHtDg/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=KIXACCJHtDg",
        "original_url": "https://www.youtube.com/watch?v=KIXACCJHtDg"
    },
    {
        "index": 118,
        "title": "Moshe Zadka, Glyph Creating And Consuming Modern Web Services with Twisted   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=ztkBG4qLR_4",
        "video_id": "ztkBG4qLR_4",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11072,
        "view_count": 1246,
        "like_count": 18,
        "comment_count": 5,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Moshe Zadka, Glyph\n\nThis tutorial will show students how to write applications and services which efficiently publish and consume services and APIs.\n\nTo do so, we will combine 4 Python-based technologies:\n\n - Jupyter is a real-time development environment.\n - Twisted is a powerful platform for network programming that supports many protocols, including HTTP.\n - Klein is a Twisted-based web application framework.\n - Treq is a Requests-style HTTP client based on Twisted.\n\nBy combining all of these we will guide students through _interactively prototyping_ a production quality web application that _publishes_ both _service APIs_ and web resources such as HTML, and that can _efficiently consume many back-end services_ such as 3rd-party APIs.\n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ztkBG4qLR_4/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ztkBG4qLR_4",
        "original_url": "https://www.youtube.com/watch?v=ztkBG4qLR_4"
    },
    {
        "index": 119,
        "title": "Kenneth Love   Django Admin  Basics and Beyond   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=XphJRQ3AzMU",
        "video_id": "XphJRQ3AzMU",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11000,
        "view_count": 20734,
        "like_count": 403,
        "comment_count": 15,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Kenneth Love\n\nDjango's admin is a great tool but it isn't always the easiest or friendliest to set up and customize. The ModelAdmin class has a lot of attributes and methods to understand and come to grips with. On top of these attributes, the admin's inlines, custom actions, custom media, and more mean that, really, you can do anything you need with the admin...if you can figure out how. The docs are good but leave a lot to experimentation and the code is notoriously dense.\n\nIn this tutorial, you'll learn the basics of setting up the admin so you can get your job done. Then we'll dive deeper and see how advanced features like autocomplete, Markdown editors, image editors, and others would be added to make the admin really shine.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/XphJRQ3AzMU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=XphJRQ3AzMU",
        "original_url": "https://www.youtube.com/watch?v=XphJRQ3AzMU"
    },
    {
        "index": 120,
        "title": "Aaron Knight   Build a data pipeline with Luigi   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=jpkZGXrhZJ8",
        "video_id": "jpkZGXrhZJ8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11954,
        "view_count": 12420,
        "like_count": 122,
        "comment_count": 17,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Aaron Knight\n\n[Luigi][1] is a Python library for building pipelines of batch processes. It \"\"handles dependency resolution, workflow management, visualization, handling failures, command line integration, and much more\"\"\n\nIn this tutorial, we will use Luigi to build a data pipeline that runs a series of interdependent jobs. We will also discuss some real-world use cases for Luigi, and show how it can make running a data pipeline much more robust and reliable.\n\n  [1]: https://pypi.python.org/pypi/luigi\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/jpkZGXrhZJ8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=jpkZGXrhZJ8",
        "original_url": "https://www.youtube.com/watch?v=jpkZGXrhZJ8"
    },
    {
        "index": 121,
        "title": "Maciej Szulik   Effectively running python applications in KubernetesOpenShift   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=U5WJgE_T-tE",
        "video_id": "U5WJgE_T-tE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 10376,
        "view_count": 955,
        "like_count": 7,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Maciej Szulik\n\nGoogle, Red Hat, Intel, Huawei, Mirantis, Deis and many, many others are investing a lot of time and effort into improving Kubernetes.  I bet, you have encountered that name at least once in the past twelve months, either on Hacker News, Reddit, or somewhere else.  Do you want to learn more about the best container orchestration in the universe, but were afraid of the setup complexity?  Do you want to see how easy it is to run any application using containers?  Do you want to experience the joy of scaling application with a single click?  This, and a lot more will be\ndiscussed in details.\nIn this tutorial, every attendee will be provided with an environment, and step by step instructions necessary to setup the environment, build and deploy a microservices based sample application.  Alternatively, a sample application of any choosing can be used throughout the entire tutorial.  All that will be performed on OpenShift, which is a Red Hat distribution of Kuberenets with some add-ons that will be described in details at the beginning of the tutorial.  To wet your appetite even more, here are some of the topics we are going to cover:\n\n- automatic build and deployment\n- git integration\n- image registry integration\n- scaling application\n- containers security\n- batch tasks\n\nand much more.\n\nAfter the session, every person will be able to play around with the accompanying code repository that was used in the tutorial, which includes detailed instructions how to run it on your own from scratch.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/U5WJgE_T-tE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=U5WJgE_T-tE",
        "original_url": "https://www.youtube.com/watch?v=U5WJgE_T-tE"
    },
    {
        "index": 122,
        "title": "Jacob Kaplan Moss   Let's build a web framework!   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=7kwnjoAJ2HQ",
        "video_id": "7kwnjoAJ2HQ",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11668,
        "view_count": 11147,
        "like_count": 267,
        "comment_count": 12,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Jacob Kaplan-Moss\n\n \"Reinventing the wheel is great if your goal is to learn more about wheels.\"\n -- James Tauber\n\nIf you're building a web app, you probably reach for your favorite framework -- Django, Flask, Pyramid, etc. But we rarely stop to think about what these tools are doing under the hood. In this hands-on tutorial, you'll gain a deeper understanding of what frameworks are and how they work by implementing your own framework from scratch. We'll build a complete (if minimal) web framework that handles the WSGI request/response cycle, routing, controllers, templating, and a data layer. Along the way you'll gain a deeper understanding of the decisions web frameworks make, their relative merits, and inner workings.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/7kwnjoAJ2HQ/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=7kwnjoAJ2HQ",
        "original_url": "https://www.youtube.com/watch?v=7kwnjoAJ2HQ"
    },
    {
        "index": 123,
        "title": "Eric J  Ma   Best Testing Practices for Data Science   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=yACtdj1_IxE",
        "video_id": "yACtdj1_IxE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 11180,
        "view_count": 5529,
        "like_count": 52,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Eric J. Ma\n\nSo you're a data scientist wrangling with data that's continually avalanching in, and there's always errors cropping up! `NaN`s, strings where there are supposed to be integers, and more. Moreover, your team is writing code that is getting reused, but that code is failing in mysterious places. How do you solve this? Testing is the answer! In this tutorial, you will gain practical hands-on experience writing tests in a data science setting so that you can continually ensure the integrity of your code and data. You will learn how to use `py.test`, `coverage.py`, and `hypothesis` to write better tests for your code.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/yACtdj1_IxE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=yACtdj1_IxE",
        "original_url": "https://www.youtube.com/watch?v=yACtdj1_IxE"
    },
    {
        "index": 124,
        "title": "Tyler Reddy   Mastering scipy spatial   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=ETJc3NfU9aA",
        "video_id": "ETJc3NfU9aA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 10841,
        "view_count": 3007,
        "like_count": 33,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Tyler Reddy\n\nThe heavily-used scipy library is so large that each of the major modules could fill its own tutorial syllabus. It is also production-quality software with a 1.0 release imminent. In this tutorial, my focus is to cover the scipy.spatial component of the library in great detail, from the perspective of a heavy user and active developer of the computational geometry components of scipy. From distance matrices to Voronoi diagrams and Hausdorff distances, we will explore the corners of scipy.spatial code--both long-established features and even proposed features that haven't yet made it into a stable release.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ETJc3NfU9aA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ETJc3NfU9aA",
        "original_url": "https://www.youtube.com/watch?v=ETJc3NfU9aA"
    },
    {
        "index": 125,
        "title": "Mike Müller   Faster Python Programs   Measure, don't Guess   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=xmuEsYut9Pc",
        "video_id": "xmuEsYut9Pc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 12082,
        "view_count": 1352,
        "like_count": 12,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Mike Müller\n\nOptimization can often help to make Python programs faster or use less memory.\nDeveloping a strategy, establishing solid measuring and visualization techniques\nas well as knowing about algorithmic basics and datastructures are the foundation\nfor a successful optimization. The tutorial will cover these topics.\nExamples will give you a hands-on experience on how to approach efficiently.\n\nPython is a great language. But it can be slow compared to other languages\nfor certain types of tasks. If applied appropriately, optimization may reduce\nprogram runtime or memory consumption considerably. But this often comes at a\nprice. Optimization can be time consuming and the optimized program may be more\ncomplicated. This, in turn, means more maintenance effort. How do you find\nout if it is worthwhile to optimize your program? Where should you start?\nThis tutorial will help you to answer these questions. You will learn how\nto find  an optimization strategy based on quantitative and objective criteria.\nYou will experience that one's gut feeling what to optimize is often wrong.\n\nThe solution to this problem is: „Measure, Measure, and Measure!“. You will\nlearn how to measure program run times as well as profile CPU and memory.\nThere are great tools available. You will learn how to use some of them.\nMeasuring is not easy because, by definition, as soon as you start to measure,\nyou influence your system. Keeping this impact as small as possible is\nimportant. Therefore, we will cover different measuring techniques.\n\nFurthermore, we will look at algorithmic improvements. You will see that the\nright data structure for the job can make a big difference. Finally, you will\nlearn about different caching techniques.\n\n## Software Requirements\n\nYou will need Python 2.7 or 3.5 installed on your laptop. Python 2.6 or 3.3/3.4\nshould also work. Python 3.x is strongly preferred.\n\n\n### Jupyter Notebook\n\nI will use a Jupyter Notebook for the tutorial because it makes a very good\nteaching tool. You are welcome to use the setup you prefer, i.e editor, IDE,\nREPL. If you also like to use a Jupyter Notebook, I recommend `conda` for\neasy installation. Similarly to `virtualenv`, `conda` allows creating isolated\nenvironments but allows binary installs for all platforms.\n\nThere are two ways to install `Jupyter` via `conda`:\n\n1. Use [Minconda][10]. This is a  small install and (after you installed it)\n   you can use the command  `conda` to create an environment:\n  `conda create -n pycon2016 python=3.5`\n   Now you can change into this environment:\n   `source activate pycon2016`. The prompt should change to `(pycon2017)`.\n   Now you can install IPython: `conda install Jupyter`.\n\n2. Install [Anaconda][20] and you are ready to go if you don't mind installing\n   lots of packages from the scientific field.\n\n### Working with ``conda`` environments\n\nAfter creating a new environment, the system might still work with some\nstale settings. Even when the command ``which`` tells you that you are using an\nexecutable from your environment, this might actually not be the case.\nIf you see strange behavior using a command line tool in your environment,\nuse ``hash -r`` and try again.\n\n[10]: http://conda.pydata.org/miniconda.html\n[20]: http://continuum.io/downloads\n\n\n### Tools\n\nYou can install these with ``pip`` (in the active ``conda`` environment):\n\n* [SnakeViz][3]\n* [line_profiler][4]\n* [Pympler][6]\n* [memory_profiler][7]\n* [pyprof2calltree][9]\n\n\n\n#### Linux\n\nUsing the package manager of your OS should be the best option.\n\n\n[1]: http://conda.pydata.org/miniconda.html\n[3]: http://jiffyclub.github.io/snakeviz/\n[2]: http://continuum.io/downloads\n[4]: https://pypi.python.org/pypi/line_profiler/\n[6]: https://pypi.python.org/pypi/Pympler\n[7]: https://pypi.python.org/pypi/memory_profiler\n[8]: http://kcachegrind.sourceforge.net/html/Home.html\n[9]: https://github.com/pwaller/pyprof2calltree/\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/xmuEsYut9Pc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xmuEsYut9Pc",
        "original_url": "https://www.youtube.com/watch?v=xmuEsYut9Pc"
    },
    {
        "index": 126,
        "title": "Amirali Sanatinia   Applied Modern Cryptography in Python   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=LJY4kaNw57c",
        "video_id": "LJY4kaNw57c",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 10609,
        "view_count": 2516,
        "like_count": 29,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Amirali Sanatinia\n\nToday we use cryptography in almost everywhere. From surfing the web over https, to working remotely over ssh. Although most developers don't need to implement cryptography primitives, the knowledge and understanding of these building block allows them to better deploy them in their application. In modern crypto we have all the building block to develop secure application. However, we see instances of insecure code everywhere. Most of these vulnerabilities are not because of theoretic shortcomings, but due to bad implementation or a flawed protocol design. Cryptography is a delicate art where nuances matter, and failure to comprehend the subtleties of these building blocks leads to critical vulnerabilities. To add insult to injury most of the resources available are either outdated or wrong, and inarguably, using bad crypto more dangerous than not using it.\n\nIn this tutorial we look at the basic building blocks of modern cryptography. We will cover the encryption techniques, hashing mechanisms, and key devastation algorithms. Furthermore we review two of the most widely used protocol suites, SSL and PGP. We conclude by implementing a simplified version of Pretty Good Privacy (PGP), that is used for encryption of texts, e-mails, files, directories, and whole disk partitions.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/LJY4kaNw57c/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=LJY4kaNw57c",
        "original_url": "https://www.youtube.com/watch?v=LJY4kaNw57c"
    },
    {
        "index": 127,
        "title": "Trey Hunner   Hands On Intro to Python for New Programmers   PyCon 2017",
        "url": "https://www.youtube.com/watch?v=6zu8lrYn6t8",
        "video_id": "6zu8lrYn6t8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170519",
        "duration": 12364,
        "view_count": 3158,
        "like_count": 26,
        "comment_count": 1,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Trey Hunner\n\nBrand new to programming and want to get some hands-on Python experience?  Let's learn some Python together!\n\nDuring this tutorial we will work through a number of programming exercises together.  We'll be doing a lot of asking questions, taking guesses, trying things out, and seeking out help from others.\n\nIn this tutorial we'll cover:\n\n- Types of things in Python: strings, numbers, lists\n- Conditionally executing code\n- Repeating code with loops\n- Getting user input\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/6zu8lrYn6t8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=6zu8lrYn6t8",
        "original_url": "https://www.youtube.com/watch?v=6zu8lrYn6t8"
    },
    {
        "index": 128,
        "title": "Eric J. Ma, Mridul Seth - Network Analysis Made Simple - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=E4VKzFmByhE",
        "video_id": "E4VKzFmByhE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 8732,
        "view_count": 1748,
        "like_count": 12,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Eric J. Ma, Mridul Seth\n\nHave you ever wondered about how those data scientists at Facebook and LinkedIn make friend recommendations? Or how epidemiologists track down patient zero in an outbreak? If so, then this tutorial is for you. In this tutorial, we will use a variety of datasets to help you understand the fundamentals of network thinking, with a particular focus on constructing, summarizing, and visualizing complex networks.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/E4VKzFmByhE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=E4VKzFmByhE",
        "original_url": "https://www.youtube.com/watch?v=E4VKzFmByhE"
    },
    {
        "index": 129,
        "title": "Aileen Nielsen - Time Series Analysis - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=zmfe2RaX-14",
        "video_id": "zmfe2RaX-14",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11505,
        "view_count": 64259,
        "like_count": 1238,
        "comment_count": 24,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Aileen Nielsen\n\nTime series analysis is more relevant than ever with the rise of big data, the internet of things, and the general availability of data that follows events through time. This tutorial will introduce participants to the many versatile tools Python offers for exploring, analyzing, and predicting time series data. The tutorial will be a mix of lecture and practice, and it will be broken down into four components:\n\n (1) Handling timestamped data in Python \n (2) Commonly encountered problems with time series \n (3) Time series prediction exercises \n (4) Time series classification exercises\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/zmfe2RaX-14/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=zmfe2RaX-14",
        "original_url": "https://www.youtube.com/watch?v=zmfe2RaX-14"
    },
    {
        "index": 130,
        "title": "Luciano Ramalho - Decorators and descriptors decoded - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=81S01c9zytE",
        "video_id": "81S01c9zytE",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 10502,
        "view_count": 12721,
        "like_count": 167,
        "comment_count": 19,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Luciano Ramalho\n\nPython developers use decorators and descriptors on a daily basis, but many don't understand them well enough to create (or debug) them. Decorators are widely deployed in popular Python Web frameworks. Descriptors are the key to the database mappers used with those frameworks, but under the covers they play an even more crucial role in Python as the device that turns plain functions into bound methods, setting the value of the `self` argument. This tutorial is a gentle introduction these important language features, using a test-driven presentation and exercises, and covering enhancements in Python 3.6 that make class metaprogramming easier to get right.\n\nDecorators without closures are presented first, highlighting the difference between _run time_ and _import time_ that is crucial when meta-programming. We then get a firm grounding on closures and how they are implemented in Python, before moving to higher order function decorators and class decorators.\n\nCoverage of descriptors starts with a close look at Python's `property` built-in function and dynamic attribute look up. We then implement some ORM-like field validation descriptors, encounter a usability problem, and leverage PEP 487 -- Simpler customisation of class creation -- to solve it. Alternative implementations using a class decorator and a metaclass will be contrasted to the PEP 487 solution.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/81S01c9zytE/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=81S01c9zytE",
        "original_url": "https://www.youtube.com/watch?v=81S01c9zytE"
    },
    {
        "index": 131,
        "title": "Fantastic Data and Where To Find Them: An introduction to APIs, RSS, and Scraping - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=A42voDYkFZw",
        "video_id": "A42voDYkFZw",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 12047,
        "view_count": 7624,
        "like_count": 44,
        "comment_count": 3,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Nicole Donnelly, Tony Ojeda, Will Voorhees\n\nWhether you’re building a custom web application, getting started in machine learning, or just want to try something new, everyone needs data. And while the web offers a seemingly boundless source for custom data sets, the collection of that data can present a whole host of obstacles. From ever-changing APIs to rate-limiting woes, from nightmarishly nested XML to convoluted DOM trees, working with APIs and web scraping are challenging but critically useful skills for application developers and data scientists alike. In this tutorial, we’ll introduce RESTful APIs, RSS feeds, and web scraping in order to see how different ingestion techniques impact application development. We’ll explore how and when to use Python libraries such as `feedparser`, `requests`, `beautifulsoup`, and `urllib`. And finally we will present common data collection problems and how to overcome them. \n\n\nWe’ll take a hands-on, directed exercise approach combined with short presentations to engage a range of different APIs (with and without authentication), explore examples of how and why you might web scrape, and learn the ethical and legal considerations for both. To prepare attendees to create their own data ingestion scripts, the tutorial will walk through a set of examples for robust and responsible data collection and ingestion. This tutorial will conclude with a case study of [Baleen](https://pypi.python.org/pypi/baleen/0.3.3), an automated RSS ingestion service designed to construct a production-grade text corpus for NLP research and machine learning applications. Exercises will be presented both as Jupyter Notebooks and Python scripts.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/A42voDYkFZw/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=A42voDYkFZw",
        "original_url": "https://www.youtube.com/watch?v=A42voDYkFZw"
    },
    {
        "index": 132,
        "title": "Trey Hunner - Readable Regular Expressions - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=0sOfhhduqks",
        "video_id": "0sOfhhduqks",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11981,
        "view_count": 8890,
        "like_count": 122,
        "comment_count": 14,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Trey Hunner\n\nWhat are regular expressions, what are they useful for, and why are they so hard to read?  We'll learn what regular expressions are good for, how to make our own regular expressions, and how to make our regular expressions friendly and readable (yes it's possible, sort of).\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/0sOfhhduqks/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=0sOfhhduqks",
        "original_url": "https://www.youtube.com/watch?v=0sOfhhduqks"
    },
    {
        "index": 133,
        "title": "James Bennett - An introduction to secure web development with Django and Python - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=i4CxLpYhkrM",
        "video_id": "i4CxLpYhkrM",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 10575,
        "view_count": 7084,
        "like_count": 126,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: James Bennett\n\nYou can't afford to have security be an optional or \"\"nice-to-have\"\" feature in your applications. Luckily, Django has your back: this workshop will introduce you to thinking about security, cover a broad range of security concerns from the mundane to the arcane, and walk you through, in detail, how Django and the broader Django and Python ecosystems can help protect you and your users from them.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/i4CxLpYhkrM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=i4CxLpYhkrM",
        "original_url": "https://www.youtube.com/watch?v=i4CxLpYhkrM"
    },
    {
        "index": 134,
        "title": "Mike Bright, Haïkel Guémar, Mario Loriedo - ContainerOrchestration.py: The tutorial session",
        "url": "https://www.youtube.com/watch?v=Yue_vHcT-Cc",
        "video_id": "Yue_vHcT-Cc",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11707,
        "view_count": 428,
        "like_count": 3,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Mike Bright, Haïkel Guémar, Mario Loriedo\n\nContainer Orchestration is the new hot topic in design of scalable system architecture.\n\nIn this tutorial we look at the main choices for container orchestrators: Docker Swarm, Kubernetes and Apache Mesos.\n\nWe will look at the use of the respective Python APIs for interacting with thoses engines.\n\nThis 3-hr session will provide hands-on use of those orchestrators with real use-cases.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/Yue_vHcT-Cc/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=Yue_vHcT-Cc",
        "original_url": "https://www.youtube.com/watch?v=Yue_vHcT-Cc"
    },
    {
        "index": 135,
        "title": "Joe Jevnik - How to Write and Debug C Extension Modules - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=g6ya_0aII7o",
        "video_id": "g6ya_0aII7o",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11990,
        "view_count": 3826,
        "like_count": 64,
        "comment_count": 6,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Joe Jevnik\n\nThe CPython interpreter allows us implement modules in C for performance\ncritical code or to interface with external libraries while presenting users\nwith a high level Python API. This tutorial will teach you how to leverage to\npower of C in your Python projects.\n\nWe will start by explaining the C representation of Python objects and how to\nmanipulate them from within C. We will then move on to implementing functions in\nC for use in Python. We will discuss reference counting and correct exception\nhandling. We will also talk about how to package and build your new extension\nmodule so that it may be shared on PyPI. (We will only be covering building\nextension modules on GNU/Linux and OSX, not Windows).\n\nAfter the break, we will show how to implement a new type in C. This will cover\nhow to hook into various protocols and properly support cyclic garbage\ncollection. We will also discuss techniques for debugging C extension modules\nwith gdb using the CPython gdb extension.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/g6ya_0aII7o/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=g6ya_0aII7o",
        "original_url": "https://www.youtube.com/watch?v=g6ya_0aII7o"
    },
    {
        "index": 136,
        "title": "Christopher Fonnesbeck - Introduction to Statistical Modeling with Python - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=TMmSESkhRtI",
        "video_id": "TMmSESkhRtI",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11954,
        "view_count": 43292,
        "like_count": 595,
        "comment_count": 17,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Christopher Fonnesbeck\n\nThis intermediate-level tutorial will provide students with hands-on experience applying practical statistical modeling methods on real data. Unlike many introductory statistics courses, we will not be applying \"\"cookbook\"\" methods that are easy to teach, but often inapplicable; instead, we will learn some foundational statistical methods that can be applied generally to a wide variety of problems: maximum likelihood, bootstrapping, linear regression, and other modern techniques. The tutorial will start with a short introduction on data manipulation and cleaning using [pandas](http://pandas.pydata.org/), before proceeding on to simple concepts like fitting data to statistical distributions, and how to use Monte Carlo simulation for data analysis. Slightly more advanced topics include bootstrapping (for estimating uncertainty around estimates) and flexible linear regression methods using Bayesian methods. By using and modifying hand-coded implementations of these techniques, students will gain an understanding of how each method works. Students will come away with knowledge of how to deal with very practical statistical problems, such as how to deal with missing data, how to check a statistical model for appropriateness, and how to properly express the uncertainty in the quantities estimated by statistical methods. \n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/TMmSESkhRtI/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=TMmSESkhRtI",
        "original_url": "https://www.youtube.com/watch?v=TMmSESkhRtI"
    },
    {
        "index": 137,
        "title": "Thomas Ballinger, Rose Ames - Web programming from the beginning - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=a77fm3qdyj8",
        "video_id": "a77fm3qdyj8",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11818,
        "view_count": 6145,
        "like_count": 50,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Thomas Ballinger, Rose Ames\n\n*What’s the web all about anyway? How can you make your computer talk to other computers with Python?*\n\nModern web frameworks such as Django and Flask are immensely powerful. However, these useful tools obscure the foundations of network programming upon which they are based, which can be very helpful to understand. So instead of building useful applications with these libraries, let's experiment with sockets!\n\nAt this tutorial, a Python-flavored history of the web will be presented and attendees will write or modify a TCP chat client, a static site web server, an HTTP client, a CGI script, and a WSGI-compliant server and web application. We will learn what all those things are and how they fit together, bringing the architecture of modern web apps into better focus.\n\nThe material will be accessible to participants with no web development experience, however, they must be able to write and run Python scripts at the command-line. This tutorial might appeal to someone also attending an introductory web development tutorial, but it covers separate, complementary material. Web development experience is not required but a little exposure would be helpful; for instance, installing flask and running the minimal application on the [quickstart page](http://flask.pocoo.org/docs/0.11/quickstart/). Similarly, prior exposure to HTML would be useful but is not necessary.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/a77fm3qdyj8/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=a77fm3qdyj8",
        "original_url": "https://www.youtube.com/watch?v=a77fm3qdyj8"
    },
    {
        "index": 138,
        "title": "Chalmer Lowe - bokeh: Data Visualization in Python - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=xId9B1BVusA",
        "video_id": "xId9B1BVusA",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 12251,
        "view_count": 9901,
        "like_count": 75,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Chalmer Lowe\n\nBokeh is a powerful data visualization library that creates fully interactive plots and integrates well with the data analysis tools you already know and love: pandas, matplotlib, seaborn, ggplot. Bokeh can produce stand-alone browser-based plots and much more sophisticated server-hosted visualizations.\n\n* Learn to use bokeh to create everything from basic graphs to advanced interactive plots, dashboards, and data applications\n* Incorporate bokeh within your Jupyter/IPython notebooks\n* Partner bokeh with other libraries such as matplotlib, seaborn, pandas, and ggplot\n* Learn about bokeh server: to serve up even more impressive realtime visualizations\n* Explore configurations and settings\n* Recognize and overcome common problems\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/xId9B1BVusA/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=xId9B1BVusA",
        "original_url": "https://www.youtube.com/watch?v=xId9B1BVusA"
    },
    {
        "index": 139,
        "title": "Dave Forgac, Ian Zelikman - Contract-First API Development Using The OpenAPI Specification (Swagger)",
        "url": "https://www.youtube.com/watch?v=ZmxhBr9VrDU",
        "video_id": "ZmxhBr9VrDU",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 10795,
        "view_count": 1413,
        "like_count": 10,
        "comment_count": null,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Dave Forgac, Ian Zelikman\n\nOften developers will implement APIs and then only after they’re released think about things like specifications and documentation. Instead we can make the design of the API contract an explicit part of our development process using The OpenAPI Specification (Swagger) and open source tools.\n\nIn this workshop we will:\n\n - Discuss the contract-first approach\n - Build and validate a simple OpenAPI Specification\n - Generate reference documentation and show how you can incorporate it with other docs\n - Run a mock server so clients can test using the API\n - Generate stub code based on the specification\n - Implement a basic working API using Flask\n - Show how you can iteratively add features and make changes\n - Discuss generating specifications for existing APIs\n\nParticipants will leave with:\n\n - An understanding of how to incorporate a contract-first process into their API development workflow\n - An example specification that can be used as reference for their own API design \n - Working code for a basic API that can be used as a basis for their own development\n\nParticipants are expected to have a basic familiarity with HTTP / RESTful APIs, understanding of simple git operations, and some development experience.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/ZmxhBr9VrDU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=ZmxhBr9VrDU",
        "original_url": "https://www.youtube.com/watch?v=ZmxhBr9VrDU"
    },
    {
        "index": 140,
        "title": "Allen Downey, Jason Woodard - Complexity Science - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=qHWhy3PWhes",
        "video_id": "qHWhy3PWhes",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 9954,
        "view_count": 1398,
        "like_count": 15,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Allen Downey, Jason Woodard\n\nComplexity Science is an approach to modeling systems using tools from discrete mathematics and computer science, including networks, cellular automata, and agent-based models.  It has applications in many areas of natural and social science.\n\nPython is a particularly good language for exploring and implementing models of complex systems.  In this tutorial, we present material from the draft second edition of *Think Complexity*, and from a class we teach at Olin College.  We will work with random networks using NetworkX, with cellular automata using NumPy, and we will implement simple agent-based models.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/qHWhy3PWhes/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=qHWhy3PWhes",
        "original_url": "https://www.youtube.com/watch?v=qHWhy3PWhes"
    },
    {
        "index": 141,
        "title": "Chloe Mawer, Jonathan Whitmore - Exploratory data analysis in python - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=W5WE9Db2RLU",
        "video_id": "W5WE9Db2RLU",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 10495,
        "view_count": 22510,
        "like_count": 277,
        "comment_count": 15,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speakers: Chloe Mawer, Jonathan Whitmore\n\nWith the recent advancements in machine learning algorithms and statistical techniques, and the increasing ease of implementing them in Python, it is tempting to ignore the power and necessity of exploratory data analysis (EDA), the crucial step before diving into machine learning or statistical modeling. Simply applying machine learning algorithms without a proper orientation of the dataset can lead to wasted time and spurious conclusions. EDA allows practitioners to gain intuition for the pattern of the data, identify anomalies, narrow down a set of alternative modeling approaches, devise strategies to handle missing data, and ensure correct interpretation of the results. Further, EDA can rapidly generate insights and answer many questions without requiring complex modeling.\n\nPython is a fantastic language not only for machine learning, but also EDA. In this tutorial, we will walk through two hands-on examples of how to perform EDA using Python and discuss various EDA techniques for cross-section data, time-series data, and panel data. One example will demonstrate how to use EDA to answer questions, test business assumptions, and generate hypotheses for further analysis. The other example will focus on performing EDA to prepare for modeling.  Between these two examples, we will cover: \n\n* Data profiling and quality assessment\n* Basic describing of the data \n* Visualizing the data including interactive visualizations \n* Identifying patterns in the data (including patterns of correlated missing data)\n* Dealing with many attributes (columns) \n* Dealing with large datasets using sampling techniques\n* Informing the engineering of features for future modeling \n* Identifying challenges of using the data (e.g. skewness, outliers) \n* Developing an intuition for interpreting the results of future modeling \n\nThe intended audience for this tutorial are aspiring and practicing data scientists and analysts, or anyone who wants to be able to get insights out of data. Students must have at least an intermediate-level knowledge of Python and some familiarity with analyzing data would be beneficial. Installation of Jupyter Notebook will be required (and potentially, we will also demonstrate analysis in JupyterLab, if its development in the next few months allows). Instructions will be sent on what packages to install beforehand. \n\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/W5WE9Db2RLU/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=W5WE9Db2RLU",
        "original_url": "https://www.youtube.com/watch?v=W5WE9Db2RLU"
    },
    {
        "index": 142,
        "title": "Reuben Cummings - Using Functional Programming for efficient Data Processing and Analysis",
        "url": "https://www.youtube.com/watch?v=9kDUTJahXBM",
        "video_id": "9kDUTJahXBM",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11459,
        "view_count": 4215,
        "like_count": 49,
        "comment_count": 2,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Reuben Cummings\n\nAs a multi paradigm language, Python has great support for functional programming. For better or for worse, leading data libraries such as Pandas eschew the this style for object-oriented programming. This tutorial will explain how to take advantage of Python's excellent functional programming capabilities to efficiently obtain, clean, transform, and store data from disparate sources.\n\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/9kDUTJahXBM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=9kDUTJahXBM",
        "original_url": "https://www.youtube.com/watch?v=9kDUTJahXBM"
    },
    {
        "index": 143,
        "title": "Miguel Grinberg - Microservices with Python and Flask - PyCon 2017",
        "url": "https://www.youtube.com/watch?v=nrzLdMWTRMM",
        "video_id": "nrzLdMWTRMM",
        "uploader": "PyCon 2017",
        "uploader_id": "@pycon2017",
        "uploader_url": "https://www.youtube.com/@pycon2017",
        "upload_date": "20170518",
        "duration": 11941,
        "view_count": 46691,
        "like_count": 660,
        "comment_count": 22,
        "tags": [],
        "categories": [
            "People & Blogs"
        ],
        "description": "\"Speaker: Miguel Grinberg\n\nMicroservices are receiving the buzzword treatment these days, and as such, they have a cloud of hype surrounding them that makes it hard to separate substance from fluff. In this tutorial, Miguel Grinberg starts with an introduction to this architecture, including what's great and not so great about it, and then teaches you how a traditional monolithic application written in Flask can be refactored into a modern distributed system based on microservices.\n\nSlides can be found at: https://speakerdeck.com/pycon2017 and https://github.com/PyCon/2017-slides\"",
        "thumbnail": "https://i.ytimg.com/vi_webp/nrzLdMWTRMM/maxresdefault.webp",
        "age_limit": 0,
        "is_live": false,
        "was_live": false,
        "availability": "public",
        "webpage_url": "https://www.youtube.com/watch?v=nrzLdMWTRMM",
        "original_url": "https://www.youtube.com/watch?v=nrzLdMWTRMM"
    }
]